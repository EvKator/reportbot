!function(e){var t={};function r(n){if(t[n])return t[n].exports;var i=t[n]={i:n,l:!1,exports:{}};return e[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)r.d(n,i,function(t){return e[t]}.bind(null,i));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=29)}([function(e,t,r){"use strict";var n=r(50),i=n.DOMParser,a=n.XMLSerializer,o=r(1).throwXmlTagNotFound;function s(e){return e[e.length-1]}var u={nullGetter:function(e){return e.module?(e.module,""):"undefined"},xmlFileNames:[],parser:function(e){return function(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}({},"get",function(t){return"."===e?t:t[e]})},linebreaks:!1,delimiters:{start:"{",end:"}"}};var l={"&":"&amp;","'":"&apos;","<":"&lt;",">":"&gt;",'"':"&quot;"},c=/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g;function h(e){return e.replace(c,"\\$&")}var f=Object.keys(l).map(function(e){var t=l[e];return{rstart:new RegExp(h(t),"g"),rend:new RegExp(h(e),"g"),start:t,end:e}});var d=new RegExp(String.fromCharCode(160),"g");function p(e,t,r){for(var n=r,i=e.length;n<i;n++){if(e[n].value==="</"+t+">")return n}return null}function m(e,t,r){for(var n=r;n>=0;n--){var i=e[n];if(0===i.value.indexOf("<"+t)&&-1!==[">"," "].indexOf(i.value[t.length+1]))return n}return null}function g(e,t){var r=t.type,n=t.tag,i=t.position;return"tag"===r&&n===e&&"start"===i}function v(e,t){var r=t.type,n=t.tag,i=t.position;return"tag"===r&&n===e&&"end"===i}var _=/[\x00-\x08\x0B\x0C\x0E-\x1F]/;e.exports={endsWith:function(e,t){return-1!==e.indexOf(t,e.length-t.length)},startsWith:function(e,t){return e.substring(0,t.length)===t},isContent:function(e){return"placeholder"===e.type||"content"===e.type&&"insidetag"===e.position},isParagraphStart:function(e){return g("w:p",e)||g("a:p",e)},isParagraphEnd:function(e){return v("w:p",e)||v("a:p",e)},isTagStart:g,isTagEnd:v,isTextStart:function(e){return"tag"===e.type&&"start"===e.position&&e.text},isTextEnd:function(e){return"tag"===e.type&&"end"===e.position&&e.text},unique:function(e){for(var t={},r=[],n=0,i=e.length;n<i;++n)t.hasOwnProperty(e[n])||(t[e[n]]=!0,r.push(e[n]));return r},chunkBy:function(e,t){return e.reduce(function(e,r){var n=s(e);if(0===n.length)return n.push(r),e;var i=t(r);return"start"===i?e.push([r]):"end"===i?(n.push(r),e.push([])):n.push(r),e},[[]]).filter(function(e){return e.length>0})},last:s,mergeObjects:function(){for(var e,t,r={},n=0;n<arguments.length;n+=1){e=arguments[n],t=Object.keys(e);for(var i=0;i<t.length;i+=1)r[t[i]]=e[t[i]]}return r},xml2str:function(e){return(new a).serializeToString(e).replace(/xmlns(:[a-z0-9]+)?="" ?/g,"")},str2xml:function(e){return(new i).parseFromString(e,"text/xml")},getRightOrNull:p,getRight:function(e,t,r){var n=p(e,t,r);if(null!==n)return n;o({position:"right",element:t,parsed:e,index:r})},getLeftOrNull:m,getLeft:function(e,t,r){var n=m(e,t,r);if(null!==n)return n;o({position:"left",element:t,parsed:e,index:r})},pregMatchAll:function(e,t){for(var r,n=[];null!=(r=e.exec(t));)n.push({array:r,offset:r.index});return n},convertSpaces:function(e){return e.replace(d," ")},escapeRegExp:h,charMapRegexes:f,hasCorruptCharacters:function(e){return _.test(e)},defaults:u,wordToUtf8:function(e){for(var t,r=0,n=f.length;r<n;r++)t=f[r],e=e.replace(t.rstart,t.end);return e},utf8ToWord:function(e){var t;"string"!=typeof e&&(e=e.toString());for(var r=0,n=f.length;r<n;r++)t=f[r],e=e.replace(t.rend,t.start);return e},concatArrays:function(e){for(var t=[],r=0;r<e.length;r++)for(var n=e[r],i=0,a=n.length;i<a;i++)t.push(n[i]);return t},charMap:l}},function(e,t,r){"use strict";function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e){this.name="GenericError",this.message=e,this.stack=new Error(e).stack}function a(e){this.name="TemplateError",this.message=e,this.stack=new Error(e).stack}function o(e){this.name="RenderingError",this.message=e,this.stack=new Error(e).stack}function s(e){this.name="ScopeParserError",this.message=e,this.stack=new Error(e).stack}function u(e){this.name="InternalError",this.properties={explanation:"InternalError"},this.message=e,this.stack=new Error(e).stack}function l(e){this.name="APIVersionError",this.properties={explanation:"APIVersionError"},this.message=e,this.stack=new Error(e).stack}i.prototype=Error.prototype,a.prototype=new i,o.prototype=new i,s.prototype=new i,u.prototype=new i,l.prototype=new i,e.exports={XTError:i,XTTemplateError:a,XTInternalError:u,XTScopeParserError:s,XTAPIVersionError:l,RenderingError:o,getClosingTagNotMatchOpeningTag:function(e){var t=e.tags,r=new a("Closing tag does not match opening tag");return r.properties={id:"closing_tag_does_not_match_opening_tag",explanation:'The tag "'.concat(t[0].value,'" is closed by the tag "').concat(t[1].value,'"'),openingtag:t[0].value,offset:[t[0].offset,t[1].offset],closingtag:t[1].value},r},getLoopPositionProducesInvalidXMLError:function(e){var t=e.tag,r=new a('The position of the loop tags "'.concat(t,'" would produce invalid XML'));return r.properties={tag:t,id:"loop_position_invalid",explanation:'The tags "'.concat(t,'" are misplaced in the document, for example one of them is in a table and the other one outside the table')},r},getScopeCompilationError:function(e){var t=e.tag,r=e.rootError,n=new s("Scope parser compilation failed");return n.properties={id:"scopeparser_compilation_failed",tag:t,explanation:'The scope parser for the tag "'.concat(t,'" failed to compile'),rootError:r},n},getScopeParserExecutionError:function(e){var t=e.tag,r=e.scope,n=e.error,i=new s("Scope parser execution failed");return i.properties={id:"scopeparser_execution_failed",explanation:"The scope parser for the tag ".concat(t," failed to execute"),scope:r,tag:t,rootError:n},i},getUnclosedTagException:function(e){var t=new a("Unclosed tag");return t.properties={xtag:function(e){return e[0]}(e.xtag.split(" ")).substr(1),id:"unclosed_tag",context:e.xtag,offset:e.offset,lIndex:e.lIndex,explanation:'The tag beginning with "'.concat(e.xtag.substr(0,10),'" is unclosed')},t},getUnmatchedLoopException:function(e){var t=e.location,r="start"===t?"unclosed":"unopened",n=new a("".concat("start"===t?"Unclosed":"Unopened"," loop")),i=e.part.value;return n.properties={id:"".concat(r,"_loop"),explanation:'The loop with tag "'.concat(i,'" is ').concat(r),xtag:i},n},getUnopenedTagException:function(e){var t=new a("Unopened tag");return t.properties={xtag:function(e){return e[e.length-1]}(e.xtag.split(" ")),id:"unopened_tag",context:e.xtag,offset:e.offset,lIndex:e.lIndex,explanation:'The tag beginning with "'.concat(e.xtag.substr(0,10),'" is unopened')},t},throwApiVersionError:function(e,t){var r=new l(e);throw r.properties=function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},i=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),i.forEach(function(t){n(e,t,r[t])})}return e}({id:"api_version_error"},t),r},throwContentMustBeString:function(e){var t=new u("Content must be a string");throw t.properties.id="xmltemplater_content_must_be_string",t.properties.type=e,t},throwCorruptCharacters:function(e){var t=e.tag,r=e.value,n=new o("There are some XML corrupt characters");throw n.properties={id:"invalid_xml_characters",xtag:t,value:r,explanation:"There are some corrupt characters for the field ${tag}"},n},throwFileTypeNotHandled:function(e){var t=new u('The filetype "'.concat(e,'" is not handled by docxtemplater'));throw t.properties={id:"filetype_not_handled",explanation:'The file you are trying to generate is of type "'.concat(e,'", but only docx and pptx formats are handled'),fileType:e},t},throwFileTypeNotIdentified:function(){var e=new u("The filetype for this file could not be identified, is this file corrupted ?");throw e.properties={id:"filetype_not_identified"},e},throwLocationInvalid:function(e){throw new u('Location should be one of "start" or "end" (given : '.concat(e.location,")"))},throwMalformedXml:function(e){var t=new u("Malformed xml");throw t.properties={part:e,id:"malformed_xml"},t},throwMultiError:function(e){var t=new a("Multi error");throw t.properties={errors:e,id:"multi_error",explanation:"The template has multiple errors"},t},throwRawTagNotInParagraph:function(e){var t=new a("Raw tag not in paragraph"),r=e.part,n=r.value,i=r.offset;throw t.properties={id:"raw_tag_outerxml_invalid",explanation:'The tag "'.concat(n,'" is not inside a paragraph'),rootError:e.rootError,xtag:n,offset:i,postparsed:e.postparsed,expandTo:e.expandTo,index:e.index},t},throwRawTagShouldBeOnlyTextInParagraph:function(e){var t=new a("Raw tag should be the only text in paragraph"),r=e.part.value;throw t.properties={id:"raw_xml_tag_should_be_only_text_in_paragraph",explanation:'The raw tag "'.concat(r,'" should be the only text in this paragraph. This means that this tag should not be surrounded by any text or spaces.'),xtag:r,offset:e.part.offset,paragraphParts:e.paragraphParts},t},throwUnimplementedTagType:function(e){var t=new a('Unimplemented tag type "'.concat(e.type,'"'));throw t.properties={part:e,id:"unimplemented_tag_type"},t},throwXmlTagNotFound:function(e){var t=new a('No tag "'.concat(e.element,'" was found at the ').concat(e.position));throw t.properties={id:"no_xml_tag_found_at_".concat(e.position),explanation:'No tag "'.concat(e.element,'" was found at the ').concat(e.position),part:e.parsed[e.index],parsed:e.parsed,index:e.index,element:e.element},t},throwXmlInvalid:function(e,t){var r=new a("An XML file has invalid xml");throw r.properties={id:"file_has_invalid_xml",content:e,offset:t,explanation:"The docx contains invalid XML, it is most likely corrupt"},r}}},function(e,t,r){"use strict";var n=r(4),i=r(8),a=r(10);function o(e){return e}function s(e,t){for(var r=0;r<e.length;++r)t[r]=255&e.charCodeAt(r);return t}function u(e){var r=65536,n=[],i=e.length,o=t.getTypeOf(e),s=0,u=!0;try{switch(o){case"uint8array":String.fromCharCode.apply(null,new Uint8Array(0));break;case"nodebuffer":String.fromCharCode.apply(null,a(0))}}catch(e){u=!1}if(!u){for(var l="",c=0;c<e.length;c++)l+=String.fromCharCode(e[c]);return l}for(;s<i&&r>1;)try{"array"===o||"nodebuffer"===o?n.push(String.fromCharCode.apply(null,e.slice(s,Math.min(s+r,i)))):n.push(String.fromCharCode.apply(null,e.subarray(s,Math.min(s+r,i)))),s+=r}catch(e){r=Math.floor(r/2)}return n.join("")}function l(e,t){for(var r=0;r<e.length;r++)t[r]=e[r];return t}t.string2binary=function(e){for(var t="",r=0;r<e.length;r++)t+=String.fromCharCode(255&e.charCodeAt(r));return t},t.arrayBuffer2Blob=function(e,r){t.checkSupport("blob"),r=r||"application/zip";try{return new Blob([e],{type:r})}catch(t){try{var n=new(window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder);return n.append(e),n.getBlob(r)}catch(e){throw new Error("Bug : can't construct the Blob.")}}},t.applyFromCharCode=u;var c={};c.string={string:o,array:function(e){return s(e,new Array(e.length))},arraybuffer:function(e){return c.string.uint8array(e).buffer},uint8array:function(e){return s(e,new Uint8Array(e.length))},nodebuffer:function(e){return s(e,a(e.length))}},c.array={string:u,array:o,arraybuffer:function(e){return new Uint8Array(e).buffer},uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return a(e)}},c.arraybuffer={string:function(e){return u(new Uint8Array(e))},array:function(e){return l(new Uint8Array(e),new Array(e.byteLength))},arraybuffer:o,uint8array:function(e){return new Uint8Array(e)},nodebuffer:function(e){return a(new Uint8Array(e))}},c.uint8array={string:u,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return e.buffer},uint8array:o,nodebuffer:function(e){return a(e)}},c.nodebuffer={string:u,array:function(e){return l(e,new Array(e.length))},arraybuffer:function(e){return c.nodebuffer.uint8array(e).buffer},uint8array:function(e){return l(e,new Uint8Array(e.length))},nodebuffer:o},t.transformTo=function(e,r){if(r||(r=""),!e)return r;t.checkSupport(e);var n=t.getTypeOf(r);return c[n][e](r)},t.getTypeOf=function(e){return"string"==typeof e?"string":"[object Array]"===Object.prototype.toString.call(e)?"array":n.nodebuffer&&a.test(e)?"nodebuffer":n.uint8array&&e instanceof Uint8Array?"uint8array":n.arraybuffer&&e instanceof ArrayBuffer?"arraybuffer":void 0},t.checkSupport=function(e){if(!n[e.toLowerCase()])throw new Error(e+" is not supported by this browser")},t.MAX_VALUE_16BITS=65535,t.MAX_VALUE_32BITS=-1,t.pretty=function(e){var t,r,n="";for(r=0;r<(e||"").length;r++)n+="\\x"+((t=e.charCodeAt(r))<16?"0":"")+t.toString(16).toUpperCase();return n},t.findCompression=function(e){for(var t in i)if(i.hasOwnProperty(t)&&i[t].magic===e)return i[t];return null},t.isRegExp=function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},t.extend=function(){var e,t,r={};for(e=0;e<arguments.length;e++)for(t in arguments[e])arguments[e].hasOwnProperty(t)&&void 0===r[t]&&(r[t]=arguments[e][t]);return r}},function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Int32Array;function i(e,t){return Object.prototype.hasOwnProperty.call(e,t)}t.assign=function(e){for(var t=Array.prototype.slice.call(arguments,1);t.length;){var r=t.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(var n in r)i(r,n)&&(e[n]=r[n])}}return e},t.shrinkBuf=function(e,t){return e.length===t?e:e.subarray?e.subarray(0,t):(e.length=t,e)};var a={arraySet:function(e,t,r,n,i){if(t.subarray&&e.subarray)e.set(t.subarray(r,r+n),i);else for(var a=0;a<n;a++)e[i+a]=t[r+a]},flattenChunks:function(e){var t,r,n,i,a,o;for(n=0,t=0,r=e.length;t<r;t++)n+=e[t].length;for(o=new Uint8Array(n),i=0,t=0,r=e.length;t<r;t++)a=e[t],o.set(a,i),i+=a.length;return o}},o={arraySet:function(e,t,r,n,i){for(var a=0;a<n;a++)e[i+a]=t[r+a]},flattenChunks:function(e){return[].concat.apply([],e)}};t.setTyped=function(e){e?(t.Buf8=Uint8Array,t.Buf16=Uint16Array,t.Buf32=Int32Array,t.assign(t,a)):(t.Buf8=Array,t.Buf16=Array,t.Buf32=Array,t.assign(t,o))},t.setTyped(n)},function(e,t,r){"use strict";if(t.base64=!0,t.array=!0,t.string=!0,t.arraybuffer="undefined"!=typeof ArrayBuffer&&"undefined"!=typeof Uint8Array,t.nodebuffer="undefined"!=typeof Buffer,t.uint8array="undefined"!=typeof Uint8Array,"undefined"==typeof ArrayBuffer)t.blob=!1;else{var n=new ArrayBuffer(0);try{t.blob=0===new Blob([n],{type:"application/zip"}).size}catch(e){try{var i=new(window.BlobBuilder||window.WebKitBlobBuilder||window.MozBlobBuilder||window.MSBlobBuilder);i.append(n),t.blob=0===i.getBlob("application/zip").size}catch(e){t.blob=!1}}}},function(e,t,r){"use strict";function n(){}function i(e){return e}e.exports=function(e){var t={set:n,parse:n,render:n,getTraits:n,nullGetter:n,optionsTransformer:i,postrender:i,errorsTransformer:i,getRenderedMap:i,postparse:i,on:n,resolve:n};if(Object.keys(t).every(function(t){return!e[t]}))throw new Error("This module cannot be wrapped, because it doesn't define any of the necessary functions");return Object.keys(t).forEach(function(r){e[r]=e[r]||t[r]}),e}},function(e,t,r){"use strict";var n="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";t.encode=function(e,t){for(var r,i,a,o,s,u,l,c="",h=0;h<e.length;)o=(r=e.charCodeAt(h++))>>2,s=(3&r)<<4|(i=e.charCodeAt(h++))>>4,u=(15&i)<<2|(a=e.charCodeAt(h++))>>6,l=63&a,isNaN(i)?u=l=64:isNaN(a)&&(l=64),c=c+n.charAt(o)+n.charAt(s)+n.charAt(u)+n.charAt(l);return c},t.decode=function(e,t){var r,i,a,o,s,u,l="",c=0;for(e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");c<e.length;)r=n.indexOf(e.charAt(c++))<<2|(o=n.indexOf(e.charAt(c++)))>>4,i=(15&o)<<4|(s=n.indexOf(e.charAt(c++)))>>2,a=(3&s)<<6|(u=n.indexOf(e.charAt(c++))),l+=String.fromCharCode(r),64!=s&&(l+=String.fromCharCode(i)),64!=u&&(l+=String.fromCharCode(a));return l}},function(e,t,r){"use strict";var n=r(4),i=r(2),a=r(41),o=r(17),s=r(18),u=r(6),l=r(8),c=r(19),h=r(10),f=r(20),d=r(42),p=r(43),m=function(e){if(e._data instanceof c&&(e._data=e._data.getContent(),e.options.binary=!0,e.options.base64=!1,"uint8array"===i.getTypeOf(e._data))){var t=e._data;e._data=new Uint8Array(t.length),0!==t.length&&e._data.set(t,0)}return e._data},g=function(e){var t=m(e);return"string"===i.getTypeOf(t)?!e.options.binary&&n.nodebuffer?h(t,"utf-8"):e.asBinary():t},v=function(e){var t=m(this);return null===t||void 0===t?"":(this.options.base64&&(t=u.decode(t)),t=e&&this.options.binary?C.utf8decode(t):i.transformTo("string",t),e||this.options.binary||(t=i.transformTo("string",C.utf8encode(t))),t)},_=function(e,t,r){this.name=e,this.dir=r.dir,this.date=r.date,this.comment=r.comment,this.unixPermissions=r.unixPermissions,this.dosPermissions=r.dosPermissions,this._data=t,this.options=r,this._initialMetadata={dir:r.dir,date:r.date}};_.prototype={asText:function(){return v.call(this,!0)},asBinary:function(){return v.call(this,!1)},asNodeBuffer:function(){var e=g(this);return i.transformTo("nodebuffer",e)},asUint8Array:function(){var e=g(this);return i.transformTo("uint8array",e)},asArrayBuffer:function(){return this.asUint8Array().buffer}};var w=function(e,t){var r,n="";for(r=0;r<t;r++)n+=String.fromCharCode(255&e),e>>>=8;return n},y=function(e,t,r){var n,a=i.getTypeOf(t);if("string"==typeof(r=function(e){return!0!==(e=e||{}).base64||null!==e.binary&&void 0!==e.binary||(e.binary=!0),(e=i.extend(e,s)).date=e.date||new Date,null!==e.compression&&(e.compression=e.compression.toUpperCase()),e}(r)).unixPermissions&&(r.unixPermissions=parseInt(r.unixPermissions,8)),r.unixPermissions&&16384&r.unixPermissions&&(r.dir=!0),r.dosPermissions&&16&r.dosPermissions&&(r.dir=!0),r.dir&&(e=x(e)),r.createFolders&&(n=b(e))&&k.call(this,n,!0),r.dir||null===t||void 0===t)r.base64=!1,r.binary=!1,t=null,a=null;else if("string"===a)r.binary&&!r.base64&&!0!==r.optimizedBinaryString&&(t=i.string2binary(t));else{if(r.base64=!1,r.binary=!0,!(a||t instanceof c))throw new Error("The data of '"+e+"' is in an unsupported format !");"arraybuffer"===a&&(t=i.transformTo("uint8array",t))}var o=new _(e,t,r);return this.files[e]=o,o},b=function(e){"/"==e.slice(-1)&&(e=e.substring(0,e.length-1));var t=e.lastIndexOf("/");return t>0?e.substring(0,t):""},x=function(e){return"/"!=e.slice(-1)&&(e+="/"),e},k=function(e,t){return t=void 0!==t&&t,e=x(e),this.files[e]||y.call(this,e,null,{dir:!0,createFolders:t}),this.files[e]},E=function(e,t,r){var n,o=new c;return e._data instanceof c?(o.uncompressedSize=e._data.uncompressedSize,o.crc32=e._data.crc32,0===o.uncompressedSize||e.dir?(t=l.STORE,o.compressedContent="",o.crc32=0):e._data.compressionMethod===t.magic?o.compressedContent=e._data.getCompressedContent():(n=e._data.getContent(),o.compressedContent=t.compress(i.transformTo(t.compressInputType,n),r))):((n=g(e))&&0!==n.length&&!e.dir||(t=l.STORE,n=""),o.uncompressedSize=n.length,o.crc32=a(n),o.compressedContent=t.compress(i.transformTo(t.compressInputType,n),r)),o.compressedSize=o.compressedContent.length,o.compressionMethod=t.magic,o},T=function(e,t,r,n,s,u){r.compressedContent;var l,c,h,d,p=u!==f.utf8encode,m=i.transformTo("string",u(t.name)),g=i.transformTo("string",f.utf8encode(t.name)),v=t.comment||"",_=i.transformTo("string",u(v)),y=i.transformTo("string",f.utf8encode(v)),b=g.length!==t.name.length,x=y.length!==v.length,k=t.options,E="",T="",C="";h=t._initialMetadata.dir!==t.dir?t.dir:k.dir,d=t._initialMetadata.date!==t.date?t.date:k.date;var N=0,S=0;h&&(N|=16),"UNIX"===s?(S=798,N|=function(e,t){var r=e;return e||(r=t?16893:33204),(65535&r)<<16}(t.unixPermissions,h)):(S=20,N|=function(e,t){return 63&(e||0)}(t.dosPermissions)),l=d.getHours(),l<<=6,l|=d.getMinutes(),l<<=5,l|=d.getSeconds()/2,c=d.getFullYear()-1980,c<<=4,c|=d.getMonth()+1,c<<=5,c|=d.getDate(),b&&(T=w(1,1)+w(a(m),4)+g,E+="up"+w(T.length,2)+T),x&&(C=w(1,1)+w(this.crc32(_),4)+y,E+="uc"+w(C.length,2)+C);var A="";return A+="\n\0",A+=p||!b&&!x?"\0\0":"\0\b",A+=r.compressionMethod,A+=w(l,2),A+=w(c,2),A+=w(r.crc32,4),A+=w(r.compressedSize,4),A+=w(r.uncompressedSize,4),A+=w(m.length,2),A+=w(E.length,2),{fileRecord:o.LOCAL_FILE_HEADER+A+m+E,dirRecord:o.CENTRAL_FILE_HEADER+w(S,2)+A+w(_.length,2)+"\0\0\0\0"+w(N,4)+w(n,4)+m+E+_,compressedObject:r}},C={load:function(e,t){throw new Error("Load method is not defined. Is the file jszip-load.js included ?")},filter:function(e){var t,r,n,a,o=[];for(t in this.files)this.files.hasOwnProperty(t)&&(n=this.files[t],a=new _(n.name,n._data,i.extend(n.options)),r=t.slice(this.root.length,t.length),t.slice(0,this.root.length)===this.root&&e(r,a)&&o.push(a));return o},file:function(e,t,r){if(1===arguments.length){if(i.isRegExp(e)){var n=e;return this.filter(function(e,t){return!t.dir&&n.test(e)})}return this.filter(function(t,r){return!r.dir&&t===e})[0]||null}return e=this.root+e,y.call(this,e,t,r),this},folder:function(e){if(!e)return this;if(i.isRegExp(e))return this.filter(function(t,r){return r.dir&&e.test(t)});var t=this.root+e,r=k.call(this,t),n=this.clone();return n.root=r.name,n},remove:function(e){e=this.root+e;var t=this.files[e];if(t||("/"!=e.slice(-1)&&(e+="/"),t=this.files[e]),t&&!t.dir)delete this.files[e];else for(var r=this.filter(function(t,r){return r.name.slice(0,e.length)===e}),n=0;n<r.length;n++)delete this.files[r[n].name];return this},generate:function(e){e=i.extend(e||{},{base64:!0,compression:"STORE",compressionOptions:null,type:"base64",platform:"DOS",comment:null,mimeType:"application/zip",encodeFileName:f.utf8encode}),i.checkSupport(e.type),"darwin"!==e.platform&&"freebsd"!==e.platform&&"linux"!==e.platform&&"sunos"!==e.platform||(e.platform="UNIX"),"win32"===e.platform&&(e.platform="DOS");var t,r,n=[],a=0,s=0,c=i.transformTo("string",e.encodeFileName(e.comment||this.comment||""));for(var h in this.files)if(this.files.hasOwnProperty(h)){var m=this.files[h],g=m.options.compression||e.compression.toUpperCase(),v=l[g];if(!v)throw new Error(g+" is not a valid compression method !");var _=m.options.compressionOptions||e.compressionOptions||{},y=E.call(this,m,v,_),b=T.call(this,h,m,y,a,e.platform,e.encodeFileName);a+=b.fileRecord.length+y.compressedSize,s+=b.dirRecord.length,n.push(b)}var x;x=o.CENTRAL_DIRECTORY_END+"\0\0\0\0"+w(n.length,2)+w(n.length,2)+w(s,4)+w(a,4)+w(c.length,2)+c;var k=e.type.toLowerCase();for(t="uint8array"===k||"arraybuffer"===k||"blob"===k||"nodebuffer"===k?new p(a+s+x.length):new d(a+s+x.length),r=0;r<n.length;r++)t.append(n[r].fileRecord),t.append(n[r].compressedObject.compressedContent);for(r=0;r<n.length;r++)t.append(n[r].dirRecord);t.append(x);var C=t.finalize();switch(e.type.toLowerCase()){case"uint8array":case"arraybuffer":case"nodebuffer":return i.transformTo(e.type.toLowerCase(),C);case"blob":return i.arrayBuffer2Blob(i.transformTo("arraybuffer",C),e.mimeType);case"base64":return e.base64?u.encode(C):C;default:return C}},crc32:function(e,t){return a(e,t)},utf8encode:function(e){return i.transformTo("string",f.utf8encode(e))},utf8decode:function(e){return f.utf8decode(e)}};e.exports=C},function(e,t,r){"use strict";t.STORE={magic:"\0\0",compress:function(e,t){return e},uncompress:function(e){return e},compressInputType:null,uncompressInputType:null},t.DEFLATE=r(31)},function(e,t,r){"use strict";e.exports={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"}},function(e,t,r){"use strict";e.exports=function(e,t){return new Buffer(e,t)},e.exports.test=function(e){return Buffer.isBuffer(e)}},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=r(0),a=i.getRightOrNull,o=i.getRight,s=i.getLeft,u=i.getLeftOrNull,l=i.concatArrays,c=i.chunkBy,h=i.isTagStart,f=i.isTagEnd,d=i.isContent,p=i.last,m=r(1),g=m.XTTemplateError,v=m.throwRawTagNotInParagraph,_=m.getLoopPositionProducesInvalidXMLError;function w(e,t){if(0===e.length)return!1;var r=e[e.length-1].tag.substr(1),n=t.substr(2,t.length-3);return 0===r.indexOf(n)}function y(e,t){return e.push({tag:t}),e}e.exports={expandToOne:function(e,t){var r=[];return e.errors&&(r=e.errors,e=e.postparsed),e.reduce(function(e,r){return"placeholder"===r.type&&r.module===t.moduleName&&e.push(r),e},[]).forEach(function(n){try{e=function(e,t,r){var n,i,a=e.expandTo||r.expandTo,u=t.indexOf(e);if(!a)return t;try{n=o(t,a,u),i=s(t,a,u)}catch(r){throw r instanceof g&&v({part:e,rootError:r,postparsed:t,expandTo:a,index:u}),r}var c=t.slice(i,u),h=t.slice(u+1,n+1),f=r.getInner({index:u,part:e,leftParts:c,rightParts:h,left:i,right:n,postparsed:t});return f.length||(f.expanded=[c,h],f=[f]),l([t.slice(0,i),f,t.slice(n+1)])}(n,e,t)}catch(e){if(!(e instanceof g))throw e;r.push(e)}}),{postparsed:e,errors:r}},getExpandToDefault:function(e,t,r){var i=function(e){for(var t,r=e.filter(function(e){return"tag"===e.type}),n=[],i=0;i<r.length;i++)"/"===(t=r[i].value)[1]?w(n,t)?n.pop():n=y(n,t):"/"!==t[t.length-2]&&(n=y(n,t));return n}(e.slice(t[0].offset,t[1].offset));if(i.filter(function(e){return"/"===e.tag[1]}).length!==i.filter(function(e){var t=e.tag;return"/"!==t[1]&&"/"!==t[t.length-2]}).length)return{error:_({tag:t[0].part.value})};for(var o=function(n,o){var s=r[n],l=s.contains,m=s.expand,g=s.onlyTextInTag;if(function(e,t){for(var r=0;r<t.length;r++)if(0===t[r].tag.indexOf("<".concat(e)))return!0;return!1}(l,i)){if(g){var v=u(e,l,t[0].offset),_=a(e,l,t[1].offset);if(null===v||null===_)return"continue";var w=c(e.slice(v,_),function(e){return h(l,e)?"start":f(l,e)?"end":null});if(w.length<=2)return"continue";var y=w[0],b=p(w),x=y.filter(d),k=b.filter(d);if(1!==x.length||1!==k.length)return"continue"}return{v:{value:m}}}},s=0,l=r.length;s<l;s++){var m=o(s);switch(m){case"continue":continue;default:if("object"===n(m))return m.v}}return!1}}},function(e,t,r){"use strict";e.exports=function(e,t,r,n){for(var i=65535&e|0,a=e>>>16&65535|0,o=0;0!==r;){r-=o=r>2e3?2e3:r;do{a=a+(i=i+t[n++]|0)|0}while(--o);i%=65521,a%=65521}return i|a<<16|0}},function(e,t,r){"use strict";var n=function(){for(var e,t=[],r=0;r<256;r++){e=r;for(var n=0;n<8;n++)e=1&e?3988292384^e>>>1:e>>>1;t[r]=e}return t}();e.exports=function(e,t,r,i){var a=n,o=i+r;e^=-1;for(var s=i;s<o;s++)e=e>>>8^a[255&(e^t[s])];return-1^e}},function(e,t,r){"use strict";var n=r(3),i=!0,a=!0;try{String.fromCharCode.apply(null,[0])}catch(e){i=!1}try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(e){a=!1}for(var o=new n.Buf8(256),s=0;s<256;s++)o[s]=s>=252?6:s>=248?5:s>=240?4:s>=224?3:s>=192?2:1;function u(e,t){if(t<65537&&(e.subarray&&a||!e.subarray&&i))return String.fromCharCode.apply(null,n.shrinkBuf(e,t));for(var r="",o=0;o<t;o++)r+=String.fromCharCode(e[o]);return r}o[254]=o[254]=1,t.string2buf=function(e){var t,r,i,a,o,s=e.length,u=0;for(a=0;a<s;a++)55296==(64512&(r=e.charCodeAt(a)))&&a+1<s&&56320==(64512&(i=e.charCodeAt(a+1)))&&(r=65536+(r-55296<<10)+(i-56320),a++),u+=r<128?1:r<2048?2:r<65536?3:4;for(t=new n.Buf8(u),o=0,a=0;o<u;a++)55296==(64512&(r=e.charCodeAt(a)))&&a+1<s&&56320==(64512&(i=e.charCodeAt(a+1)))&&(r=65536+(r-55296<<10)+(i-56320),a++),r<128?t[o++]=r:r<2048?(t[o++]=192|r>>>6,t[o++]=128|63&r):r<65536?(t[o++]=224|r>>>12,t[o++]=128|r>>>6&63,t[o++]=128|63&r):(t[o++]=240|r>>>18,t[o++]=128|r>>>12&63,t[o++]=128|r>>>6&63,t[o++]=128|63&r);return t},t.buf2binstring=function(e){return u(e,e.length)},t.binstring2buf=function(e){for(var t=new n.Buf8(e.length),r=0,i=t.length;r<i;r++)t[r]=e.charCodeAt(r);return t},t.buf2string=function(e,t){var r,n,i,a,s=t||e.length,l=new Array(2*s);for(n=0,r=0;r<s;)if((i=e[r++])<128)l[n++]=i;else if((a=o[i])>4)l[n++]=65533,r+=a-1;else{for(i&=2===a?31:3===a?15:7;a>1&&r<s;)i=i<<6|63&e[r++],a--;a>1?l[n++]=65533:i<65536?l[n++]=i:(i-=65536,l[n++]=55296|i>>10&1023,l[n++]=56320|1023&i)}return u(l,n)},t.utf8border=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;r>=0&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+o[e[r]]>t?r:t}},function(e,t,r){"use strict";e.exports=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0}},function(e,t,r){"use strict";e.exports={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8}},function(e,t,r){"use strict";t.LOCAL_FILE_HEADER="PK",t.CENTRAL_FILE_HEADER="PK",t.CENTRAL_DIRECTORY_END="PK",t.ZIP64_CENTRAL_DIRECTORY_LOCATOR="PK",t.ZIP64_CENTRAL_DIRECTORY_END="PK",t.DATA_DESCRIPTOR="PK\b"},function(e,t,r){"use strict";t.base64=!1,t.binary=!1,t.dir=!1,t.createFolders=!1,t.date=null,t.compression=null,t.compressionOptions=null,t.comment=null,t.unixPermissions=null,t.dosPermissions=null},function(e,t,r){"use strict";function n(){this.compressedSize=0,this.uncompressedSize=0,this.crc32=0,this.compressionMethod=null,this.compressedContent=null}n.prototype={getContent:function(){return null},getCompressedContent:function(){return null}},e.exports=n},function(e,t,r){"use strict";for(var n=r(2),i=r(4),a=r(10),o=new Array(256),s=0;s<256;s++)o[s]=s>=252?6:s>=248?5:s>=240?4:s>=224?3:s>=192?2:1;o[254]=o[254]=1;var u=function(e,t){var r;for((t=t||e.length)>e.length&&(t=e.length),r=t-1;r>=0&&128==(192&e[r]);)r--;return r<0?t:0===r?t:r+o[e[r]]>t?r:t},l=function(e){var t,r,i,a,s=e.length,u=new Array(2*s);for(r=0,t=0;t<s;)if((i=e[t++])<128)u[r++]=i;else if((a=o[i])>4)u[r++]=65533,t+=a-1;else{for(i&=2===a?31:3===a?15:7;a>1&&t<s;)i=i<<6|63&e[t++],a--;a>1?u[r++]=65533:i<65536?u[r++]=i:(i-=65536,u[r++]=55296|i>>10&1023,u[r++]=56320|1023&i)}return u.length!==r&&(u.subarray?u=u.subarray(0,r):u.length=r),n.applyFromCharCode(u)};t.utf8encode=function(e){return i.nodebuffer?a(e,"utf-8"):function(e){var t,r,n,a,o,s=e.length,u=0;for(a=0;a<s;a++)55296==(64512&(r=e.charCodeAt(a)))&&a+1<s&&56320==(64512&(n=e.charCodeAt(a+1)))&&(r=65536+(r-55296<<10)+(n-56320),a++),u+=r<128?1:r<2048?2:r<65536?3:4;for(t=i.uint8array?new Uint8Array(u):new Array(u),o=0,a=0;o<u;a++)55296==(64512&(r=e.charCodeAt(a)))&&a+1<s&&56320==(64512&(n=e.charCodeAt(a+1)))&&(r=65536+(r-55296<<10)+(n-56320),a++),r<128?t[o++]=r:r<2048?(t[o++]=192|r>>>6,t[o++]=128|63&r):r<65536?(t[o++]=224|r>>>12,t[o++]=128|r>>>6&63,t[o++]=128|63&r):(t[o++]=240|r>>>18,t[o++]=128|r>>>12&63,t[o++]=128|r>>>6&63,t[o++]=128|63&r);return t}(e)},t.utf8decode=function(e){if(i.nodebuffer)return n.transformTo("nodebuffer",e).toString("utf-8");for(var t=[],r=0,a=(e=n.transformTo(i.uint8array?"uint8array":"array",e)).length;r<a;){var o=u(e,Math.min(r+65536,a));i.uint8array?t.push(l(e.subarray(r,o))):t.push(l(e.slice(r,o))),r=o}return t.join("")}},function(e,t,r){"use strict";var n=r(22),i=r(2);function a(e,t){this.data=e,t||(this.data=i.string2binary(this.data)),this.length=this.data.length,this.index=0,this.zero=0}a.prototype=new n,a.prototype.byteAt=function(e){return this.data.charCodeAt(this.zero+e)},a.prototype.lastIndexOfSignature=function(e){return this.data.lastIndexOf(e)-this.zero},a.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},e.exports=a},function(e,t,r){"use strict";var n=r(2);function i(e){this.data=null,this.length=0,this.index=0,this.zero=0}i.prototype={checkOffset:function(e){this.checkIndex(this.index+e)},checkIndex:function(e){if(this.length<this.zero+e||e<0)throw new Error("End of data reached (data length = "+this.length+", asked index = "+e+"). Corrupted zip ?")},setIndex:function(e){this.checkIndex(e),this.index=e},skip:function(e){this.setIndex(this.index+e)},byteAt:function(e){},readInt:function(e){var t,r=0;for(this.checkOffset(e),t=this.index+e-1;t>=this.index;t--)r=(r<<8)+this.byteAt(t);return this.index+=e,r},readString:function(e){return n.transformTo("string",this.readData(e))},readData:function(e){},lastIndexOfSignature:function(e){},readDate:function(){var e=this.readInt(4);return new Date(1980+(e>>25&127),(e>>21&15)-1,e>>16&31,e>>11&31,e>>5&63,(31&e)<<1)}},e.exports=i},function(e,t,r){"use strict";var n=r(24);function i(e){e&&(this.data=e,this.length=this.data.length,this.index=0,this.zero=0)}i.prototype=new n,i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return new Uint8Array(0);var t=this.data.subarray(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},e.exports=i},function(e,t,r){"use strict";var n=r(22);function i(e){if(e){this.data=e,this.length=this.data.length,this.index=0,this.zero=0;for(var t=0;t<this.data.length;t++)e[t]=255&e[t]}}i.prototype=new n,i.prototype.byteAt=function(e){return this.data[this.zero+e]},i.prototype.lastIndexOfSignature=function(e){for(var t=e.charCodeAt(0),r=e.charCodeAt(1),n=e.charCodeAt(2),i=e.charCodeAt(3),a=this.length-4;a>=0;--a)if(this.data[a]===t&&this.data[a+1]===r&&this.data[a+2]===n&&this.data[a+3]===i)return a-this.zero;return-1},i.prototype.readData=function(e){if(this.checkOffset(e),0===e)return[];var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},e.exports=i},function(e,t){function r(e,t){for(var r in e)t[r]=e[r]}function n(e,t){var n=e.prototype;if(Object.create){var i=Object.create(t.prototype);n.__proto__=i}if(!(n instanceof t)){function a(){}a.prototype=t.prototype,r(n,a=new a),e.prototype=n=a}n.constructor!=e&&("function"!=typeof e&&console.error("unknow Class:"+e),n.constructor=e)}var i="http://www.w3.org/1999/xhtml",a={},o=a.ELEMENT_NODE=1,s=a.ATTRIBUTE_NODE=2,u=a.TEXT_NODE=3,l=a.CDATA_SECTION_NODE=4,c=a.ENTITY_REFERENCE_NODE=5,h=a.ENTITY_NODE=6,f=a.PROCESSING_INSTRUCTION_NODE=7,d=a.COMMENT_NODE=8,p=a.DOCUMENT_NODE=9,m=a.DOCUMENT_TYPE_NODE=10,g=a.DOCUMENT_FRAGMENT_NODE=11,v=a.NOTATION_NODE=12,_={},w={},y=(_.INDEX_SIZE_ERR=(w[1]="Index size error",1),_.DOMSTRING_SIZE_ERR=(w[2]="DOMString size error",2),_.HIERARCHY_REQUEST_ERR=(w[3]="Hierarchy request error",3)),b=(_.WRONG_DOCUMENT_ERR=(w[4]="Wrong document",4),_.INVALID_CHARACTER_ERR=(w[5]="Invalid character",5),_.NO_DATA_ALLOWED_ERR=(w[6]="No data allowed",6),_.NO_MODIFICATION_ALLOWED_ERR=(w[7]="No modification allowed",7),_.NOT_FOUND_ERR=(w[8]="Not found",8)),x=(_.NOT_SUPPORTED_ERR=(w[9]="Not supported",9),_.INUSE_ATTRIBUTE_ERR=(w[10]="Attribute in use",10));_.INVALID_STATE_ERR=(w[11]="Invalid state",11),_.SYNTAX_ERR=(w[12]="Syntax error",12),_.INVALID_MODIFICATION_ERR=(w[13]="Invalid modification",13),_.NAMESPACE_ERR=(w[14]="Invalid namespace",14),_.INVALID_ACCESS_ERR=(w[15]="Invalid access",15);function k(e,t){if(t instanceof Error)var r=t;else r=this,Error.call(this,w[e]),this.message=w[e],Error.captureStackTrace&&Error.captureStackTrace(this,k);return r.code=e,t&&(this.message=this.message+": "+t),r}function E(){}function T(e,t){this._node=e,this._refresh=t,C(this)}function C(e){var t=e._node._inc||e._node.ownerDocument._inc;if(e._inc!=t){var n=e._refresh(e._node);re(e,"length",n.length),r(n,e),e._inc=t}}function N(){}function S(e,t){for(var r=e.length;r--;)if(e[r]===t)return r}function A(e,t,r,n){if(n?t[S(t,n)]=r:t[t.length++]=r,e){r.ownerElement=e;var i=e.ownerDocument;i&&(n&&B(i,e,n),function(e,t,r){e&&e._inc++,"http://www.w3.org/2000/xmlns/"==r.namespaceURI&&(t._nsMap[r.prefix?r.localName:""]=r.value)}(i,e,r))}}function I(e,t,r){var n=S(t,r);if(!(n>=0))throw k(b,new Error(e.tagName+"@"+r));for(var i=t.length-1;n<i;)t[n]=t[++n];if(t.length=i,e){var a=e.ownerDocument;a&&(B(a,e,r),r.ownerElement=null)}}function O(e){if(this._features={},e)for(var t in e)this._features=e[t]}function z(){}function D(e){return("<"==e?"&lt;":">"==e&&"&gt;")||"&"==e&&"&amp;"||'"'==e&&"&quot;"||"&#"+e.charCodeAt()+";"}function R(e,t){if(t(e))return!0;if(e=e.firstChild)do{if(R(e,t))return!0}while(e=e.nextSibling)}function P(){}function B(e,t,r,n){e&&e._inc++,"http://www.w3.org/2000/xmlns/"==r.namespaceURI&&delete t._nsMap[r.prefix?r.localName:""]}function M(e,t,r){if(e&&e._inc){e._inc++;var n=t.childNodes;if(r)n[n.length++]=r;else{for(var i=t.firstChild,a=0;i;)n[a++]=i,i=i.nextSibling;n.length=a}}}function L(e,t){var r=t.previousSibling,n=t.nextSibling;return r?r.nextSibling=n:e.firstChild=n,n?n.previousSibling=r:e.lastChild=r,M(e.ownerDocument,e),t}function F(e,t,r){var n=t.parentNode;if(n&&n.removeChild(t),t.nodeType===g){var i=t.firstChild;if(null==i)return t;var a=t.lastChild}else i=a=t;var o=r?r.previousSibling:e.lastChild;i.previousSibling=o,a.nextSibling=r,o?o.nextSibling=i:e.firstChild=i,null==r?e.lastChild=a:r.previousSibling=a;do{i.parentNode=e}while(i!==a&&(i=i.nextSibling));return M(e.ownerDocument||e,e),t.nodeType==g&&(t.firstChild=t.lastChild=null),t}function U(){this._nsMap={}}function j(){}function X(){}function Z(){}function V(){}function H(){}function $(){}function Y(){}function G(){}function W(){}function K(){}function q(){}function J(){}function Q(e,t){var r=[],n=9==this.nodeType?this.documentElement:this,i=n.prefix,a=n.namespaceURI;if(a&&null==i&&null==(i=n.lookupPrefix(a)))var o=[{namespace:a,prefix:null}];return te(this,r,e,t,o),r.join("")}function ee(e,t,r){var n=e.prefix||"",i=e.namespaceURI;if(!n&&!i)return!1;if("xml"===n&&"http://www.w3.org/XML/1998/namespace"===i||"http://www.w3.org/2000/xmlns/"==i)return!1;for(var a=r.length;a--;){var o=r[a];if(o.prefix==n)return o.namespace!=i}return!0}function te(e,t,r,n,a){if(n){if(!(e=n(e)))return;if("string"==typeof e)return void t.push(e)}switch(e.nodeType){case o:a||(a=[]);a.length;var h=e.attributes,v=h.length,_=e.firstChild,w=e.tagName;r=i===e.namespaceURI||r,t.push("<",w);for(var y=0;y<v;y++){"xmlns"==(b=h.item(y)).prefix?a.push({prefix:b.localName,namespace:b.value}):"xmlns"==b.nodeName&&a.push({prefix:"",namespace:b.value})}for(y=0;y<v;y++){var b;if(ee(b=h.item(y),0,a)){var x=b.prefix||"",k=b.namespaceURI,E=x?" xmlns:"+x:" xmlns";t.push(E,'="',k,'"'),a.push({prefix:x,namespace:k})}te(b,t,r,n,a)}if(ee(e,0,a)){x=e.prefix||"",k=e.namespaceURI,E=x?" xmlns:"+x:" xmlns";t.push(E,'="',k,'"'),a.push({prefix:x,namespace:k})}if(_||r&&!/^(?:meta|link|img|br|hr|input)$/i.test(w)){if(t.push(">"),r&&/^script$/i.test(w))for(;_;)_.data?t.push(_.data):te(_,t,r,n,a),_=_.nextSibling;else for(;_;)te(_,t,r,n,a),_=_.nextSibling;t.push("</",w,">")}else t.push("/>");return;case p:case g:for(_=e.firstChild;_;)te(_,t,r,n,a),_=_.nextSibling;return;case s:return t.push(" ",e.name,'="',e.value.replace(/[<&"]/g,D),'"');case u:return t.push(e.data.replace(/[<&]/g,D));case l:return t.push("<![CDATA[",e.data,"]]>");case d:return t.push("\x3c!--",e.data,"--\x3e");case m:var T=e.publicId,C=e.systemId;if(t.push("<!DOCTYPE ",e.name),T)t.push(' PUBLIC "',T),C&&"."!=C&&t.push('" "',C),t.push('">');else if(C&&"."!=C)t.push(' SYSTEM "',C,'">');else{var N=e.internalSubset;N&&t.push(" [",N,"]"),t.push(">")}return;case f:return t.push("<?",e.target," ",e.data,"?>");case c:return t.push("&",e.nodeName,";");default:t.push("??",e.nodeName)}}function re(e,t,r){e[t]=r}k.prototype=Error.prototype,r(_,k),E.prototype={length:0,item:function(e){return this[e]||null},toString:function(e,t){for(var r=[],n=0;n<this.length;n++)te(this[n],r,e,t);return r.join("")}},T.prototype.item=function(e){return C(this),this[e]},n(T,E),N.prototype={length:0,item:E.prototype.item,getNamedItem:function(e){for(var t=this.length;t--;){var r=this[t];if(r.nodeName==e)return r}},setNamedItem:function(e){var t=e.ownerElement;if(t&&t!=this._ownerElement)throw new k(x);var r=this.getNamedItem(e.nodeName);return A(this._ownerElement,this,e,r),r},setNamedItemNS:function(e){var t,r=e.ownerElement;if(r&&r!=this._ownerElement)throw new k(x);return t=this.getNamedItemNS(e.namespaceURI,e.localName),A(this._ownerElement,this,e,t),t},removeNamedItem:function(e){var t=this.getNamedItem(e);return I(this._ownerElement,this,t),t},removeNamedItemNS:function(e,t){var r=this.getNamedItemNS(e,t);return I(this._ownerElement,this,r),r},getNamedItemNS:function(e,t){for(var r=this.length;r--;){var n=this[r];if(n.localName==t&&n.namespaceURI==e)return n}return null}},O.prototype={hasFeature:function(e,t){var r=this._features[e.toLowerCase()];return!(!r||t&&!(t in r))},createDocument:function(e,t,r){var n=new P;if(n.implementation=this,n.childNodes=new E,n.doctype=r,r&&n.appendChild(r),t){var i=n.createElementNS(e,t);n.appendChild(i)}return n},createDocumentType:function(e,t,r){var n=new $;return n.name=e,n.nodeName=e,n.publicId=t,n.systemId=r,n}},z.prototype={firstChild:null,lastChild:null,previousSibling:null,nextSibling:null,attributes:null,parentNode:null,childNodes:null,ownerDocument:null,nodeValue:null,namespaceURI:null,prefix:null,localName:null,insertBefore:function(e,t){return F(this,e,t)},replaceChild:function(e,t){this.insertBefore(e,t),t&&this.removeChild(t)},removeChild:function(e){return L(this,e)},appendChild:function(e){return this.insertBefore(e,null)},hasChildNodes:function(){return null!=this.firstChild},cloneNode:function(e){return function e(t,r,n){var i=new r.constructor;for(var a in r){var u=r[a];"object"!=typeof u&&u!=i[a]&&(i[a]=u)}r.childNodes&&(i.childNodes=new E);i.ownerDocument=t;switch(i.nodeType){case o:var l=r.attributes,c=i.attributes=new N,h=l.length;c._ownerElement=i;for(var f=0;f<h;f++)i.setAttributeNode(e(t,l.item(f),!0));break;case s:n=!0}if(n)for(var d=r.firstChild;d;)i.appendChild(e(t,d,n)),d=d.nextSibling;return i}(this.ownerDocument||this,this,e)},normalize:function(){for(var e=this.firstChild;e;){var t=e.nextSibling;t&&t.nodeType==u&&e.nodeType==u?(this.removeChild(t),e.appendData(t.data)):(e.normalize(),e=t)}},isSupported:function(e,t){return this.ownerDocument.implementation.hasFeature(e,t)},hasAttributes:function(){return this.attributes.length>0},lookupPrefix:function(e){for(var t=this;t;){var r=t._nsMap;if(r)for(var n in r)if(r[n]==e)return n;t=t.nodeType==s?t.ownerDocument:t.parentNode}return null},lookupNamespaceURI:function(e){for(var t=this;t;){var r=t._nsMap;if(r&&e in r)return r[e];t=t.nodeType==s?t.ownerDocument:t.parentNode}return null},isDefaultNamespace:function(e){return null==this.lookupPrefix(e)}},r(a,z),r(a,z.prototype),P.prototype={nodeName:"#document",nodeType:p,doctype:null,documentElement:null,_inc:1,insertBefore:function(e,t){if(e.nodeType==g){for(var r=e.firstChild;r;){var n=r.nextSibling;this.insertBefore(r,t),r=n}return e}return null==this.documentElement&&e.nodeType==o&&(this.documentElement=e),F(this,e,t),e.ownerDocument=this,e},removeChild:function(e){return this.documentElement==e&&(this.documentElement=null),L(this,e)},importNode:function(e,t){return function e(t,r,n){var i;switch(r.nodeType){case o:(i=r.cloneNode(!1)).ownerDocument=t;case g:break;case s:n=!0}i||(i=r.cloneNode(!1));i.ownerDocument=t;i.parentNode=null;if(n)for(var a=r.firstChild;a;)i.appendChild(e(t,a,n)),a=a.nextSibling;return i}(this,e,t)},getElementById:function(e){var t=null;return R(this.documentElement,function(r){if(r.nodeType==o&&r.getAttribute("id")==e)return t=r,!0}),t},createElement:function(e){var t=new U;return t.ownerDocument=this,t.nodeName=e,t.tagName=e,t.childNodes=new E,(t.attributes=new N)._ownerElement=t,t},createDocumentFragment:function(){var e=new K;return e.ownerDocument=this,e.childNodes=new E,e},createTextNode:function(e){var t=new Z;return t.ownerDocument=this,t.appendData(e),t},createComment:function(e){var t=new V;return t.ownerDocument=this,t.appendData(e),t},createCDATASection:function(e){var t=new H;return t.ownerDocument=this,t.appendData(e),t},createProcessingInstruction:function(e,t){var r=new q;return r.ownerDocument=this,r.tagName=r.target=e,r.nodeValue=r.data=t,r},createAttribute:function(e){var t=new j;return t.ownerDocument=this,t.name=e,t.nodeName=e,t.localName=e,t.specified=!0,t},createEntityReference:function(e){var t=new W;return t.ownerDocument=this,t.nodeName=e,t},createElementNS:function(e,t){var r=new U,n=t.split(":"),i=r.attributes=new N;return r.childNodes=new E,r.ownerDocument=this,r.nodeName=t,r.tagName=t,r.namespaceURI=e,2==n.length?(r.prefix=n[0],r.localName=n[1]):r.localName=t,i._ownerElement=r,r},createAttributeNS:function(e,t){var r=new j,n=t.split(":");return r.ownerDocument=this,r.nodeName=t,r.name=t,r.namespaceURI=e,r.specified=!0,2==n.length?(r.prefix=n[0],r.localName=n[1]):r.localName=t,r}},n(P,z),U.prototype={nodeType:o,hasAttribute:function(e){return null!=this.getAttributeNode(e)},getAttribute:function(e){var t=this.getAttributeNode(e);return t&&t.value||""},getAttributeNode:function(e){return this.attributes.getNamedItem(e)},setAttribute:function(e,t){var r=this.ownerDocument.createAttribute(e);r.value=r.nodeValue=""+t,this.setAttributeNode(r)},removeAttribute:function(e){var t=this.getAttributeNode(e);t&&this.removeAttributeNode(t)},appendChild:function(e){return e.nodeType===g?this.insertBefore(e,null):function(e,t){var r=t.parentNode;if(r){var n=e.lastChild;r.removeChild(t),n=e.lastChild}return n=e.lastChild,t.parentNode=e,t.previousSibling=n,t.nextSibling=null,n?n.nextSibling=t:e.firstChild=t,e.lastChild=t,M(e.ownerDocument,e,t),t}(this,e)},setAttributeNode:function(e){return this.attributes.setNamedItem(e)},setAttributeNodeNS:function(e){return this.attributes.setNamedItemNS(e)},removeAttributeNode:function(e){return this.attributes.removeNamedItem(e.nodeName)},removeAttributeNS:function(e,t){var r=this.getAttributeNodeNS(e,t);r&&this.removeAttributeNode(r)},hasAttributeNS:function(e,t){return null!=this.getAttributeNodeNS(e,t)},getAttributeNS:function(e,t){var r=this.getAttributeNodeNS(e,t);return r&&r.value||""},setAttributeNS:function(e,t,r){var n=this.ownerDocument.createAttributeNS(e,t);n.value=n.nodeValue=""+r,this.setAttributeNode(n)},getAttributeNodeNS:function(e,t){return this.attributes.getNamedItemNS(e,t)},getElementsByTagName:function(e){return new T(this,function(t){var r=[];return R(t,function(n){n===t||n.nodeType!=o||"*"!==e&&n.tagName!=e||r.push(n)}),r})},getElementsByTagNameNS:function(e,t){return new T(this,function(r){var n=[];return R(r,function(i){i===r||i.nodeType!==o||"*"!==e&&i.namespaceURI!==e||"*"!==t&&i.localName!=t||n.push(i)}),n})}},P.prototype.getElementsByTagName=U.prototype.getElementsByTagName,P.prototype.getElementsByTagNameNS=U.prototype.getElementsByTagNameNS,n(U,z),j.prototype.nodeType=s,n(j,z),X.prototype={data:"",substringData:function(e,t){return this.data.substring(e,e+t)},appendData:function(e){e=this.data+e,this.nodeValue=this.data=e,this.length=e.length},insertData:function(e,t){this.replaceData(e,0,t)},appendChild:function(e){throw new Error(w[y])},deleteData:function(e,t){this.replaceData(e,t,"")},replaceData:function(e,t,r){r=this.data.substring(0,e)+r+this.data.substring(e+t),this.nodeValue=this.data=r,this.length=r.length}},n(X,z),Z.prototype={nodeName:"#text",nodeType:u,splitText:function(e){var t=this.data,r=t.substring(e);t=t.substring(0,e),this.data=this.nodeValue=t,this.length=t.length;var n=this.ownerDocument.createTextNode(r);return this.parentNode&&this.parentNode.insertBefore(n,this.nextSibling),n}},n(Z,X),V.prototype={nodeName:"#comment",nodeType:d},n(V,X),H.prototype={nodeName:"#cdata-section",nodeType:l},n(H,X),$.prototype.nodeType=m,n($,z),Y.prototype.nodeType=v,n(Y,z),G.prototype.nodeType=h,n(G,z),W.prototype.nodeType=c,n(W,z),K.prototype.nodeName="#document-fragment",K.prototype.nodeType=g,n(K,z),q.prototype.nodeType=f,n(q,z),J.prototype.serializeToString=function(e,t,r){return Q.call(e,t,r)},z.prototype.toString=Q;try{if(Object.defineProperty){Object.defineProperty(T.prototype,"length",{get:function(){return C(this),this.$$length}}),Object.defineProperty(z.prototype,"textContent",{get:function(){return function e(t){switch(t.nodeType){case o:case g:var r=[];for(t=t.firstChild;t;)7!==t.nodeType&&8!==t.nodeType&&r.push(e(t)),t=t.nextSibling;return r.join("");default:return t.nodeValue}}(this)},set:function(e){switch(this.nodeType){case o:case g:for(;this.firstChild;)this.removeChild(this.firstChild);(e||String(e))&&this.appendChild(this.ownerDocument.createTextNode(e));break;default:this.data=e,this.value=e,this.nodeValue=e}}}),re=function(e,t,r){e["$$"+t]=r}}}catch(e){}t.DOMImplementation=O,t.XMLSerializer=J},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,i=!1,a=void 0;try{for(var o,s=e[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){i=!0,a=e}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var i=r(1),a=i.getUnclosedTagException,o=i.getUnopenedTagException,s=i.throwMalformedXml,u=i.throwXmlInvalid,l=r(0),c=l.concatArrays,h=l.isTextStart,f=l.isTextEnd,d=0,p=-1,m=1;function g(e,t){return e[0]<=t.offset&&t.offset<e[1]}function v(e,t){return h(e)?(t&&s(e),!0):f(e)?(t||s(e),!1):t}function _(e){var t="start",r=1;"/"===e[e.length-2]&&(t="selfclosing"),"/"===e[1]&&(r=2,t="end");var n=e.indexOf(" "),i=-1===n?e.length-1:n;return{tag:e.slice(r,i),position:t}}function w(e,t){return e===t?d:-1===e||-1===t?t<e?p:m:e<t?p:m}function y(e){var t=e.split(" ");if(2!==t.length)throw new Error("New Delimiters cannot be parsed");var r=n(t,2),i=r[0],a=r[1];if(0===i.length||0===a.length)throw new Error("New Delimiters cannot be parsed");return[i,a]}function b(e){var t=this;this.innerContentParts=e,this.full="",this.parseDelimiters=function(e){t.full=t.innerContentParts.map(function(e){return e.value}).join("");var r=function(e,t){for(var r=[],i=t.start,a=t.end,o=-1;;){var s=e.indexOf(i,o+1),u=e.indexOf(a,o+1),l=null,c=void 0,h=w(s,u);if(h===d)return r;if(h===m&&(o=u,l="end",c=a.length),h===p&&(o=s,l="start",c=i.length),"start"!==l||"="!==e[o+i.length])r.push({offset:o,position:l,length:c});else{r.push({offset:s,position:"start",length:i.length,changedelimiter:!0});var f=e.indexOf("=",o+i.length+1),g=e.indexOf(a,f+1);r.push({offset:g,position:"end",length:a.length,changedelimiter:!0});var v=n(y(e.substr(o+i.length+1,f-o-i.length-1)),2);i=v[0],a=v[1],o=g}}}(t.full,e),i=0,s=t.innerContentParts.map(function(e){return{offset:(i+=e.value.length)-e.value.length,lIndex:e.lIndex}}),u=function(e,t,r){if(0===e.length)return[];var n,i=[],s=!1,u={offset:0},l=0;e.forEach(function(e){for(;r[l+1]&&!(r[l+1].offset>e.offset);)l++;n=t.substr(u.offset,e.offset-u.offset),"start"===e.position&&s||"end"===e.position&&!s?"start"===e.position?(i.push(a({xtag:n,offset:u.offset})),e.error=!0):(i.push(o({xtag:n,offset:e.offset})),e.error=!0):s=!s,u=e});var c={offset:t.length};return n=t.substr(u.offset,c.offset-u.offset),s&&(i.push(a({xtag:n,offset:u.offset})),c.error=!0),i}(r,t.full,s),l=0,c=0;t.parsed=s.map(function(e,t){for(var n=e.offset,i=[n,n+this.innerContentParts[t].value.length],a=this.innerContentParts[t].value,o=[];c<r.length&&g(i,r[c]);)o.push(r[c]),c++;var s,u=[],h=0;l>0&&(h=l,l=0),o.forEach(function(e){var t=a.substr(h,e.offset-n-h);if(t.length>0){if(s)return void(e.changedelimiter&&(h=e.offset-n+e.length,s="start"===e.position));u.push({type:"content",value:t,offset:h+n}),h+=t.length}var r={type:"delimiter",position:e.position,offset:h+n};if(e.error&&(r.error=e.error),e.changedelimiter)return s="start"===e.position,void(h=e.offset-n+e.length);u.push(r),h=e.offset-n+e.length}),l=h-a.length;var f=a.substr(h);return f.length>0&&u.push({type:"content",value:f,offset:n}),u},t),t.errors=u}}e.exports={parse:function(e,t){var r=!1,n=new b(function(e){var t=!1,r=[];return e.forEach(function(e){(t=v(e,t))&&"content"===e.type&&r.push(e)}),r}(e));n.parseDelimiters(t);var i=[],a=0;return e.forEach(function(e){r=v(e,r),"content"===e.type&&(e.position=r?"insidetag":"outsidetag"),r&&"content"===e.type?(Array.prototype.push.apply(i,n.parsed[a].map(function(e){return"content"===e.type&&(e.position="insidetag"),e})),a++):i.push(e)}),i=i.map(function(e,t){return e.lIndex=t,e}),{errors:n.errors,lexed:i}},xmlparse:function(e,t){var r=function(e,t,r){for(var n=0,i=e.length,a=c([t.map(function(e){return{tag:e,text:!0}}),r.map(function(e){return{tag:e,text:!1}})]).reduce(function(e,t){return e[t.tag]=t.text,e},{}),o=[];n<i&&-1!==(n=e.indexOf("<",n));){var s=n,l=e.indexOf("<",n+1);(-1===(n=e.indexOf(">",n))||-1!==l&&n>l)&&u(e,s);var h=e.slice(s,n+1),f=_(h),d=f.tag,p=f.position,m=a[d];null!=m&&o.push({type:"tag",position:p,text:m,offset:s,value:h,tag:d})}return o}(e,t.text,t.other),n=0,i=r.reduce(function(t,r){var i=e.substr(n,r.offset-n);return i.length>0&&t.push({type:"content",value:i}),n=r.offset+r.value.length,delete r.offset,r.value.length>0&&t.push(r),t},[]),a=e.substr(n);return a.length>0&&i.push({type:"content",value:a}),i}}},function(e,t,r){"use strict";var n=r(0).pregMatchAll;e.exports=function(e,t){var r={};r.content=e,r.tagsXmlArray=t,r.tagsXmlArrayJoined=r.tagsXmlArray.join("|");var i=new RegExp("(?:(<(?:".concat(r.tagsXmlArrayJoined,")[^>]*>)([^<>]*)</(?:").concat(r.tagsXmlArrayJoined,")>)|(<(?:").concat(r.tagsXmlArrayJoined,")[^>]*/>)"),"g");return r.matches=n(i,r.content),function(e){function t(){var t={array:Array.prototype.slice.call(arguments)};t.array.shift();var r=t.array[0]+t.array[1];t.array.unshift(r),t.array.pop();var n=t.array.pop();t.offset=n,t.first=!0,e.matches.unshift(t)}-1===e.content.indexOf("<")&&-1===e.content.indexOf(">")&&e.content.replace(/^()([^<>]*)$/,t);var r=new RegExp("^()([^<]+)</(?:".concat(e.tagsXmlArrayJoined,")>"));return e.content.replace(r,t),r=new RegExp("(<(?:".concat(e.tagsXmlArrayJoined,")[^>]*>)([^>]+)$")),e.content.replace(r,function(){var t={array:Array.prototype.slice.call(arguments)};t.array.pop();var r=t.array.pop();t.offset=r,t.last=!0,-1===t.array[0].indexOf("/>")&&e.matches.push(t)}),e}(r)}},function(e,t,r){"use strict";e.exports={match:function(e,t){return"string"==typeof e?t.substr(0,e.length)===e:e instanceof RegExp?e.test(t):void 0},getValue:function(e,t){return"string"==typeof e?t.substr(e.length):e instanceof RegExp?t.match(e)[1]:void 0},getValues:function(e,t){if(e instanceof RegExp)return t.match(e)}}},function(e,t,r){var n=r(30),i=r(49),a=r(65),o=r(66),s=new n(a.readFileSync(o.resolve(__dirname,"../simple.docx"),"binary")),u=new i;u.loadZip(s),u.setData({first_name:"Hipp",last_name:"Edgar",phone:"0652455478",description:"New Website"})},function(e,t,r){"use strict";var n=r(6);function i(e,t){if(!(this instanceof i))return new i(e,t);this.files={},this.comment=null,this.root="",e&&this.load(e,t),this.clone=function(){var e=new i;for(var t in this)"function"!=typeof this[t]&&(e[t]=this[t]);return e}}i.prototype=r(7),i.prototype.load=r(44),i.support=r(4),i.defaults=r(18),i.utils=r(48),i.base64={encode:function(e){return n.encode(e)},decode:function(e){return n.decode(e)}},i.compressions=r(8),e.exports=i},function(e,t,r){"use strict";var n="undefined"!=typeof Uint8Array&&"undefined"!=typeof Uint16Array&&"undefined"!=typeof Uint32Array,i=r(32);t.uncompressInputType=n?"uint8array":"array",t.compressInputType=n?"uint8array":"array",t.magic="\b\0",t.compress=function(e,t){return i.deflateRaw(e,{level:t.level||-1})},t.uncompress=function(e){return i.inflateRaw(e)}},function(e,t,r){"use strict";var n={};(0,r(3).assign)(n,r(33),r(36),r(16)),e.exports=n},function(e,t,r){"use strict";var n=r(34),i=r(3),a=r(14),o=r(9),s=r(15),u=Object.prototype.toString,l=0,c=-1,h=0,f=8;function d(e){if(!(this instanceof d))return new d(e);this.options=i.assign({level:c,method:f,chunkSize:16384,windowBits:15,memLevel:8,strategy:h,to:""},e||{});var t=this.options;t.raw&&t.windowBits>0?t.windowBits=-t.windowBits:t.gzip&&t.windowBits>0&&t.windowBits<16&&(t.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new s,this.strm.avail_out=0;var r=n.deflateInit2(this.strm,t.level,t.method,t.windowBits,t.memLevel,t.strategy);if(r!==l)throw new Error(o[r]);if(t.header&&n.deflateSetHeader(this.strm,t.header),t.dictionary){var p;if(p="string"==typeof t.dictionary?a.string2buf(t.dictionary):"[object ArrayBuffer]"===u.call(t.dictionary)?new Uint8Array(t.dictionary):t.dictionary,(r=n.deflateSetDictionary(this.strm,p))!==l)throw new Error(o[r]);this._dict_set=!0}}function p(e,t){var r=new d(t);if(r.push(e,!0),r.err)throw r.msg||o[r.err];return r.result}d.prototype.push=function(e,t){var r,o,s=this.strm,c=this.options.chunkSize;if(this.ended)return!1;o=t===~~t?t:!0===t?4:0,"string"==typeof e?s.input=a.string2buf(e):"[object ArrayBuffer]"===u.call(e)?s.input=new Uint8Array(e):s.input=e,s.next_in=0,s.avail_in=s.input.length;do{if(0===s.avail_out&&(s.output=new i.Buf8(c),s.next_out=0,s.avail_out=c),1!==(r=n.deflate(s,o))&&r!==l)return this.onEnd(r),this.ended=!0,!1;0!==s.avail_out&&(0!==s.avail_in||4!==o&&2!==o)||("string"===this.options.to?this.onData(a.buf2binstring(i.shrinkBuf(s.output,s.next_out))):this.onData(i.shrinkBuf(s.output,s.next_out)))}while((s.avail_in>0||0===s.avail_out)&&1!==r);return 4===o?(r=n.deflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===l):2!==o||(this.onEnd(l),s.avail_out=0,!0)},d.prototype.onData=function(e){this.chunks.push(e)},d.prototype.onEnd=function(e){e===l&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},t.Deflate=d,t.deflate=p,t.deflateRaw=function(e,t){return(t=t||{}).raw=!0,p(e,t)},t.gzip=function(e,t){return(t=t||{}).gzip=!0,p(e,t)}},function(e,t,r){"use strict";var n,i=r(3),a=r(35),o=r(12),s=r(13),u=r(9),l=0,c=1,h=3,f=4,d=5,p=0,m=1,g=-2,v=-3,_=-5,w=-1,y=1,b=2,x=3,k=4,E=0,T=2,C=8,N=9,S=15,A=8,I=286,O=30,z=19,D=2*I+1,R=15,P=3,B=258,M=B+P+1,L=32,F=42,U=69,j=73,X=91,Z=103,V=113,H=666,$=1,Y=2,G=3,W=4,K=3;function q(e,t){return e.msg=u[t],t}function J(e){return(e<<1)-(e>4?9:0)}function Q(e){for(var t=e.length;--t>=0;)e[t]=0}function ee(e){var t=e.state,r=t.pending;r>e.avail_out&&(r=e.avail_out),0!==r&&(i.arraySet(e.output,t.pending_buf,t.pending_out,r,e.next_out),e.next_out+=r,t.pending_out+=r,e.total_out+=r,e.avail_out-=r,t.pending-=r,0===t.pending&&(t.pending_out=0))}function te(e,t){a._tr_flush_block(e,e.block_start>=0?e.block_start:-1,e.strstart-e.block_start,t),e.block_start=e.strstart,ee(e.strm)}function re(e,t){e.pending_buf[e.pending++]=t}function ne(e,t){e.pending_buf[e.pending++]=t>>>8&255,e.pending_buf[e.pending++]=255&t}function ie(e,t,r,n){var a=e.avail_in;return a>n&&(a=n),0===a?0:(e.avail_in-=a,i.arraySet(t,e.input,e.next_in,a,r),1===e.state.wrap?e.adler=o(e.adler,t,a,r):2===e.state.wrap&&(e.adler=s(e.adler,t,a,r)),e.next_in+=a,e.total_in+=a,a)}function ae(e,t){var r,n,i=e.max_chain_length,a=e.strstart,o=e.prev_length,s=e.nice_match,u=e.strstart>e.w_size-M?e.strstart-(e.w_size-M):0,l=e.window,c=e.w_mask,h=e.prev,f=e.strstart+B,d=l[a+o-1],p=l[a+o];e.prev_length>=e.good_match&&(i>>=2),s>e.lookahead&&(s=e.lookahead);do{if(l[(r=t)+o]===p&&l[r+o-1]===d&&l[r]===l[a]&&l[++r]===l[a+1]){a+=2,r++;do{}while(l[++a]===l[++r]&&l[++a]===l[++r]&&l[++a]===l[++r]&&l[++a]===l[++r]&&l[++a]===l[++r]&&l[++a]===l[++r]&&l[++a]===l[++r]&&l[++a]===l[++r]&&a<f);if(n=B-(f-a),a=f-B,n>o){if(e.match_start=t,o=n,n>=s)break;d=l[a+o-1],p=l[a+o]}}}while((t=h[t&c])>u&&0!=--i);return o<=e.lookahead?o:e.lookahead}function oe(e){var t,r,n,a,o,s=e.w_size;do{if(a=e.window_size-e.lookahead-e.strstart,e.strstart>=s+(s-M)){i.arraySet(e.window,e.window,s,s,0),e.match_start-=s,e.strstart-=s,e.block_start-=s,t=r=e.hash_size;do{n=e.head[--t],e.head[t]=n>=s?n-s:0}while(--r);t=r=s;do{n=e.prev[--t],e.prev[t]=n>=s?n-s:0}while(--r);a+=s}if(0===e.strm.avail_in)break;if(r=ie(e.strm,e.window,e.strstart+e.lookahead,a),e.lookahead+=r,e.lookahead+e.insert>=P)for(o=e.strstart-e.insert,e.ins_h=e.window[o],e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+1])&e.hash_mask;e.insert&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[o+P-1])&e.hash_mask,e.prev[o&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=o,o++,e.insert--,!(e.lookahead+e.insert<P)););}while(e.lookahead<M&&0!==e.strm.avail_in)}function se(e,t){for(var r,n;;){if(e.lookahead<M){if(oe(e),e.lookahead<M&&t===l)return $;if(0===e.lookahead)break}if(r=0,e.lookahead>=P&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+P-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),0!==r&&e.strstart-r<=e.w_size-M&&(e.match_length=ae(e,r)),e.match_length>=P)if(n=a._tr_tally(e,e.strstart-e.match_start,e.match_length-P),e.lookahead-=e.match_length,e.match_length<=e.max_lazy_match&&e.lookahead>=P){e.match_length--;do{e.strstart++,e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+P-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart}while(0!=--e.match_length);e.strstart++}else e.strstart+=e.match_length,e.match_length=0,e.ins_h=e.window[e.strstart],e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+1])&e.hash_mask;else n=a._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++;if(n&&(te(e,!1),0===e.strm.avail_out))return $}return e.insert=e.strstart<P-1?e.strstart:P-1,t===f?(te(e,!0),0===e.strm.avail_out?G:W):e.last_lit&&(te(e,!1),0===e.strm.avail_out)?$:Y}function ue(e,t){for(var r,n,i;;){if(e.lookahead<M){if(oe(e),e.lookahead<M&&t===l)return $;if(0===e.lookahead)break}if(r=0,e.lookahead>=P&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+P-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart),e.prev_length=e.match_length,e.prev_match=e.match_start,e.match_length=P-1,0!==r&&e.prev_length<e.max_lazy_match&&e.strstart-r<=e.w_size-M&&(e.match_length=ae(e,r),e.match_length<=5&&(e.strategy===y||e.match_length===P&&e.strstart-e.match_start>4096)&&(e.match_length=P-1)),e.prev_length>=P&&e.match_length<=e.prev_length){i=e.strstart+e.lookahead-P,n=a._tr_tally(e,e.strstart-1-e.prev_match,e.prev_length-P),e.lookahead-=e.prev_length-1,e.prev_length-=2;do{++e.strstart<=i&&(e.ins_h=(e.ins_h<<e.hash_shift^e.window[e.strstart+P-1])&e.hash_mask,r=e.prev[e.strstart&e.w_mask]=e.head[e.ins_h],e.head[e.ins_h]=e.strstart)}while(0!=--e.prev_length);if(e.match_available=0,e.match_length=P-1,e.strstart++,n&&(te(e,!1),0===e.strm.avail_out))return $}else if(e.match_available){if((n=a._tr_tally(e,0,e.window[e.strstart-1]))&&te(e,!1),e.strstart++,e.lookahead--,0===e.strm.avail_out)return $}else e.match_available=1,e.strstart++,e.lookahead--}return e.match_available&&(n=a._tr_tally(e,0,e.window[e.strstart-1]),e.match_available=0),e.insert=e.strstart<P-1?e.strstart:P-1,t===f?(te(e,!0),0===e.strm.avail_out?G:W):e.last_lit&&(te(e,!1),0===e.strm.avail_out)?$:Y}function le(e,t,r,n,i){this.good_length=e,this.max_lazy=t,this.nice_length=r,this.max_chain=n,this.func=i}function ce(e){var t;return e&&e.state?(e.total_in=e.total_out=0,e.data_type=T,(t=e.state).pending=0,t.pending_out=0,t.wrap<0&&(t.wrap=-t.wrap),t.status=t.wrap?F:V,e.adler=2===t.wrap?0:1,t.last_flush=l,a._tr_init(t),p):q(e,g)}function he(e){var t=ce(e);return t===p&&function(e){e.window_size=2*e.w_size,Q(e.head),e.max_lazy_match=n[e.level].max_lazy,e.good_match=n[e.level].good_length,e.nice_match=n[e.level].nice_length,e.max_chain_length=n[e.level].max_chain,e.strstart=0,e.block_start=0,e.lookahead=0,e.insert=0,e.match_length=e.prev_length=P-1,e.match_available=0,e.ins_h=0}(e.state),t}function fe(e,t,r,n,a,o){if(!e)return g;var s=1;if(t===w&&(t=6),n<0?(s=0,n=-n):n>15&&(s=2,n-=16),a<1||a>N||r!==C||n<8||n>15||t<0||t>9||o<0||o>k)return q(e,g);8===n&&(n=9);var u=new function(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=C,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new i.Buf16(2*D),this.dyn_dtree=new i.Buf16(2*(2*O+1)),this.bl_tree=new i.Buf16(2*(2*z+1)),Q(this.dyn_ltree),Q(this.dyn_dtree),Q(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new i.Buf16(R+1),this.heap=new i.Buf16(2*I+1),Q(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new i.Buf16(2*I+1),Q(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0};return e.state=u,u.strm=e,u.wrap=s,u.gzhead=null,u.w_bits=n,u.w_size=1<<u.w_bits,u.w_mask=u.w_size-1,u.hash_bits=a+7,u.hash_size=1<<u.hash_bits,u.hash_mask=u.hash_size-1,u.hash_shift=~~((u.hash_bits+P-1)/P),u.window=new i.Buf8(2*u.w_size),u.head=new i.Buf16(u.hash_size),u.prev=new i.Buf16(u.w_size),u.lit_bufsize=1<<a+6,u.pending_buf_size=4*u.lit_bufsize,u.pending_buf=new i.Buf8(u.pending_buf_size),u.d_buf=1*u.lit_bufsize,u.l_buf=3*u.lit_bufsize,u.level=t,u.strategy=o,u.method=r,he(e)}n=[new le(0,0,0,0,function(e,t){var r=65535;for(r>e.pending_buf_size-5&&(r=e.pending_buf_size-5);;){if(e.lookahead<=1){if(oe(e),0===e.lookahead&&t===l)return $;if(0===e.lookahead)break}e.strstart+=e.lookahead,e.lookahead=0;var n=e.block_start+r;if((0===e.strstart||e.strstart>=n)&&(e.lookahead=e.strstart-n,e.strstart=n,te(e,!1),0===e.strm.avail_out))return $;if(e.strstart-e.block_start>=e.w_size-M&&(te(e,!1),0===e.strm.avail_out))return $}return e.insert=0,t===f?(te(e,!0),0===e.strm.avail_out?G:W):(e.strstart>e.block_start&&(te(e,!1),e.strm.avail_out),$)}),new le(4,4,8,4,se),new le(4,5,16,8,se),new le(4,6,32,32,se),new le(4,4,16,16,ue),new le(8,16,32,32,ue),new le(8,16,128,128,ue),new le(8,32,128,256,ue),new le(32,128,258,1024,ue),new le(32,258,258,4096,ue)],t.deflateInit=function(e,t){return fe(e,t,C,S,A,E)},t.deflateInit2=fe,t.deflateReset=he,t.deflateResetKeep=ce,t.deflateSetHeader=function(e,t){return e&&e.state?2!==e.state.wrap?g:(e.state.gzhead=t,p):g},t.deflate=function(e,t){var r,i,o,u;if(!e||!e.state||t>d||t<0)return e?q(e,g):g;if(i=e.state,!e.output||!e.input&&0!==e.avail_in||i.status===H&&t!==f)return q(e,0===e.avail_out?_:g);if(i.strm=e,r=i.last_flush,i.last_flush=t,i.status===F)if(2===i.wrap)e.adler=0,re(i,31),re(i,139),re(i,8),i.gzhead?(re(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),re(i,255&i.gzhead.time),re(i,i.gzhead.time>>8&255),re(i,i.gzhead.time>>16&255),re(i,i.gzhead.time>>24&255),re(i,9===i.level?2:i.strategy>=b||i.level<2?4:0),re(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(re(i,255&i.gzhead.extra.length),re(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(e.adler=s(e.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=U):(re(i,0),re(i,0),re(i,0),re(i,0),re(i,0),re(i,9===i.level?2:i.strategy>=b||i.level<2?4:0),re(i,K),i.status=V);else{var v=C+(i.w_bits-8<<4)<<8;v|=(i.strategy>=b||i.level<2?0:i.level<6?1:6===i.level?2:3)<<6,0!==i.strstart&&(v|=L),v+=31-v%31,i.status=V,ne(i,v),0!==i.strstart&&(ne(i,e.adler>>>16),ne(i,65535&e.adler)),e.adler=1}if(i.status===U)if(i.gzhead.extra){for(o=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>o&&(e.adler=s(e.adler,i.pending_buf,i.pending-o,o)),ee(e),o=i.pending,i.pending!==i.pending_buf_size));)re(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>o&&(e.adler=s(e.adler,i.pending_buf,i.pending-o,o)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=j)}else i.status=j;if(i.status===j)if(i.gzhead.name){o=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>o&&(e.adler=s(e.adler,i.pending_buf,i.pending-o,o)),ee(e),o=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,re(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>o&&(e.adler=s(e.adler,i.pending_buf,i.pending-o,o)),0===u&&(i.gzindex=0,i.status=X)}else i.status=X;if(i.status===X)if(i.gzhead.comment){o=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>o&&(e.adler=s(e.adler,i.pending_buf,i.pending-o,o)),ee(e),o=i.pending,i.pending===i.pending_buf_size)){u=1;break}u=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,re(i,u)}while(0!==u);i.gzhead.hcrc&&i.pending>o&&(e.adler=s(e.adler,i.pending_buf,i.pending-o,o)),0===u&&(i.status=Z)}else i.status=Z;if(i.status===Z&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&ee(e),i.pending+2<=i.pending_buf_size&&(re(i,255&e.adler),re(i,e.adler>>8&255),e.adler=0,i.status=V)):i.status=V),0!==i.pending){if(ee(e),0===e.avail_out)return i.last_flush=-1,p}else if(0===e.avail_in&&J(t)<=J(r)&&t!==f)return q(e,_);if(i.status===H&&0!==e.avail_in)return q(e,_);if(0!==e.avail_in||0!==i.lookahead||t!==l&&i.status!==H){var w=i.strategy===b?function(e,t){for(var r;;){if(0===e.lookahead&&(oe(e),0===e.lookahead)){if(t===l)return $;break}if(e.match_length=0,r=a._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++,r&&(te(e,!1),0===e.strm.avail_out))return $}return e.insert=0,t===f?(te(e,!0),0===e.strm.avail_out?G:W):e.last_lit&&(te(e,!1),0===e.strm.avail_out)?$:Y}(i,t):i.strategy===x?function(e,t){for(var r,n,i,o,s=e.window;;){if(e.lookahead<=B){if(oe(e),e.lookahead<=B&&t===l)return $;if(0===e.lookahead)break}if(e.match_length=0,e.lookahead>=P&&e.strstart>0&&(n=s[i=e.strstart-1])===s[++i]&&n===s[++i]&&n===s[++i]){o=e.strstart+B;do{}while(n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&i<o);e.match_length=B-(o-i),e.match_length>e.lookahead&&(e.match_length=e.lookahead)}if(e.match_length>=P?(r=a._tr_tally(e,1,e.match_length-P),e.lookahead-=e.match_length,e.strstart+=e.match_length,e.match_length=0):(r=a._tr_tally(e,0,e.window[e.strstart]),e.lookahead--,e.strstart++),r&&(te(e,!1),0===e.strm.avail_out))return $}return e.insert=0,t===f?(te(e,!0),0===e.strm.avail_out?G:W):e.last_lit&&(te(e,!1),0===e.strm.avail_out)?$:Y}(i,t):n[i.level].func(i,t);if(w!==G&&w!==W||(i.status=H),w===$||w===G)return 0===e.avail_out&&(i.last_flush=-1),p;if(w===Y&&(t===c?a._tr_align(i):t!==d&&(a._tr_stored_block(i,0,0,!1),t===h&&(Q(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),ee(e),0===e.avail_out))return i.last_flush=-1,p}return t!==f?p:i.wrap<=0?m:(2===i.wrap?(re(i,255&e.adler),re(i,e.adler>>8&255),re(i,e.adler>>16&255),re(i,e.adler>>24&255),re(i,255&e.total_in),re(i,e.total_in>>8&255),re(i,e.total_in>>16&255),re(i,e.total_in>>24&255)):(ne(i,e.adler>>>16),ne(i,65535&e.adler)),ee(e),i.wrap>0&&(i.wrap=-i.wrap),0!==i.pending?p:m)},t.deflateEnd=function(e){var t;return e&&e.state?(t=e.state.status)!==F&&t!==U&&t!==j&&t!==X&&t!==Z&&t!==V&&t!==H?q(e,g):(e.state=null,t===V?q(e,v):p):g},t.deflateSetDictionary=function(e,t){var r,n,a,s,u,l,c,h,f=t.length;if(!e||!e.state)return g;if(2===(s=(r=e.state).wrap)||1===s&&r.status!==F||r.lookahead)return g;for(1===s&&(e.adler=o(e.adler,t,f,0)),r.wrap=0,f>=r.w_size&&(0===s&&(Q(r.head),r.strstart=0,r.block_start=0,r.insert=0),h=new i.Buf8(r.w_size),i.arraySet(h,t,f-r.w_size,r.w_size,0),t=h,f=r.w_size),u=e.avail_in,l=e.next_in,c=e.input,e.avail_in=f,e.next_in=0,e.input=t,oe(r);r.lookahead>=P;){n=r.strstart,a=r.lookahead-(P-1);do{r.ins_h=(r.ins_h<<r.hash_shift^r.window[n+P-1])&r.hash_mask,r.prev[n&r.w_mask]=r.head[r.ins_h],r.head[r.ins_h]=n,n++}while(--a);r.strstart=n,r.lookahead=P-1,oe(r)}return r.strstart+=r.lookahead,r.block_start=r.strstart,r.insert=r.lookahead,r.lookahead=0,r.match_length=r.prev_length=P-1,r.match_available=0,e.next_in=l,e.input=c,e.avail_in=u,r.wrap=s,p},t.deflateInfo="pako deflate (from Nodeca project)"},function(e,t,r){"use strict";var n=r(3),i=4,a=0,o=1,s=2;function u(e){for(var t=e.length;--t>=0;)e[t]=0}var l=0,c=1,h=2,f=29,d=256,p=d+1+f,m=30,g=19,v=2*p+1,_=15,w=16,y=7,b=256,x=16,k=17,E=18,T=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0],C=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13],N=[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7],S=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],A=new Array(2*(p+2));u(A);var I=new Array(2*m);u(I);var O=new Array(512);u(O);var z=new Array(256);u(z);var D=new Array(f);u(D);var R,P,B,M=new Array(m);function L(e,t,r,n,i){this.static_tree=e,this.extra_bits=t,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=e&&e.length}function F(e,t){this.dyn_tree=e,this.max_code=0,this.stat_desc=t}function U(e){return e<256?O[e]:O[256+(e>>>7)]}function j(e,t){e.pending_buf[e.pending++]=255&t,e.pending_buf[e.pending++]=t>>>8&255}function X(e,t,r){e.bi_valid>w-r?(e.bi_buf|=t<<e.bi_valid&65535,j(e,e.bi_buf),e.bi_buf=t>>w-e.bi_valid,e.bi_valid+=r-w):(e.bi_buf|=t<<e.bi_valid&65535,e.bi_valid+=r)}function Z(e,t,r){X(e,r[2*t],r[2*t+1])}function V(e,t){var r=0;do{r|=1&e,e>>>=1,r<<=1}while(--t>0);return r>>>1}function H(e,t,r){var n,i,a=new Array(_+1),o=0;for(n=1;n<=_;n++)a[n]=o=o+r[n-1]<<1;for(i=0;i<=t;i++){var s=e[2*i+1];0!==s&&(e[2*i]=V(a[s]++,s))}}function $(e){var t;for(t=0;t<p;t++)e.dyn_ltree[2*t]=0;for(t=0;t<m;t++)e.dyn_dtree[2*t]=0;for(t=0;t<g;t++)e.bl_tree[2*t]=0;e.dyn_ltree[2*b]=1,e.opt_len=e.static_len=0,e.last_lit=e.matches=0}function Y(e){e.bi_valid>8?j(e,e.bi_buf):e.bi_valid>0&&(e.pending_buf[e.pending++]=e.bi_buf),e.bi_buf=0,e.bi_valid=0}function G(e,t,r,n){var i=2*t,a=2*r;return e[i]<e[a]||e[i]===e[a]&&n[t]<=n[r]}function W(e,t,r){for(var n=e.heap[r],i=r<<1;i<=e.heap_len&&(i<e.heap_len&&G(t,e.heap[i+1],e.heap[i],e.depth)&&i++,!G(t,n,e.heap[i],e.depth));)e.heap[r]=e.heap[i],r=i,i<<=1;e.heap[r]=n}function K(e,t,r){var n,i,a,o,s=0;if(0!==e.last_lit)do{n=e.pending_buf[e.d_buf+2*s]<<8|e.pending_buf[e.d_buf+2*s+1],i=e.pending_buf[e.l_buf+s],s++,0===n?Z(e,i,t):(Z(e,(a=z[i])+d+1,t),0!==(o=T[a])&&X(e,i-=D[a],o),Z(e,a=U(--n),r),0!==(o=C[a])&&X(e,n-=M[a],o))}while(s<e.last_lit);Z(e,b,t)}function q(e,t){var r,n,i,a=t.dyn_tree,o=t.stat_desc.static_tree,s=t.stat_desc.has_stree,u=t.stat_desc.elems,l=-1;for(e.heap_len=0,e.heap_max=v,r=0;r<u;r++)0!==a[2*r]?(e.heap[++e.heap_len]=l=r,e.depth[r]=0):a[2*r+1]=0;for(;e.heap_len<2;)a[2*(i=e.heap[++e.heap_len]=l<2?++l:0)]=1,e.depth[i]=0,e.opt_len--,s&&(e.static_len-=o[2*i+1]);for(t.max_code=l,r=e.heap_len>>1;r>=1;r--)W(e,a,r);i=u;do{r=e.heap[1],e.heap[1]=e.heap[e.heap_len--],W(e,a,1),n=e.heap[1],e.heap[--e.heap_max]=r,e.heap[--e.heap_max]=n,a[2*i]=a[2*r]+a[2*n],e.depth[i]=(e.depth[r]>=e.depth[n]?e.depth[r]:e.depth[n])+1,a[2*r+1]=a[2*n+1]=i,e.heap[1]=i++,W(e,a,1)}while(e.heap_len>=2);e.heap[--e.heap_max]=e.heap[1],function(e,t){var r,n,i,a,o,s,u=t.dyn_tree,l=t.max_code,c=t.stat_desc.static_tree,h=t.stat_desc.has_stree,f=t.stat_desc.extra_bits,d=t.stat_desc.extra_base,p=t.stat_desc.max_length,m=0;for(a=0;a<=_;a++)e.bl_count[a]=0;for(u[2*e.heap[e.heap_max]+1]=0,r=e.heap_max+1;r<v;r++)(a=u[2*u[2*(n=e.heap[r])+1]+1]+1)>p&&(a=p,m++),u[2*n+1]=a,n>l||(e.bl_count[a]++,o=0,n>=d&&(o=f[n-d]),s=u[2*n],e.opt_len+=s*(a+o),h&&(e.static_len+=s*(c[2*n+1]+o)));if(0!==m){do{for(a=p-1;0===e.bl_count[a];)a--;e.bl_count[a]--,e.bl_count[a+1]+=2,e.bl_count[p]--,m-=2}while(m>0);for(a=p;0!==a;a--)for(n=e.bl_count[a];0!==n;)(i=e.heap[--r])>l||(u[2*i+1]!==a&&(e.opt_len+=(a-u[2*i+1])*u[2*i],u[2*i+1]=a),n--)}}(e,t),H(a,l,e.bl_count)}function J(e,t,r){var n,i,a=-1,o=t[1],s=0,u=7,l=4;for(0===o&&(u=138,l=3),t[2*(r+1)+1]=65535,n=0;n<=r;n++)i=o,o=t[2*(n+1)+1],++s<u&&i===o||(s<l?e.bl_tree[2*i]+=s:0!==i?(i!==a&&e.bl_tree[2*i]++,e.bl_tree[2*x]++):s<=10?e.bl_tree[2*k]++:e.bl_tree[2*E]++,s=0,a=i,0===o?(u=138,l=3):i===o?(u=6,l=3):(u=7,l=4))}function Q(e,t,r){var n,i,a=-1,o=t[1],s=0,u=7,l=4;for(0===o&&(u=138,l=3),n=0;n<=r;n++)if(i=o,o=t[2*(n+1)+1],!(++s<u&&i===o)){if(s<l)do{Z(e,i,e.bl_tree)}while(0!=--s);else 0!==i?(i!==a&&(Z(e,i,e.bl_tree),s--),Z(e,x,e.bl_tree),X(e,s-3,2)):s<=10?(Z(e,k,e.bl_tree),X(e,s-3,3)):(Z(e,E,e.bl_tree),X(e,s-11,7));s=0,a=i,0===o?(u=138,l=3):i===o?(u=6,l=3):(u=7,l=4)}}u(M);var ee=!1;function te(e,t,r,i){X(e,(l<<1)+(i?1:0),3),function(e,t,r,i){Y(e),i&&(j(e,r),j(e,~r)),n.arraySet(e.pending_buf,e.window,t,r,e.pending),e.pending+=r}(e,t,r,!0)}t._tr_init=function(e){ee||(function(){var e,t,r,n,i,a=new Array(_+1);for(r=0,n=0;n<f-1;n++)for(D[n]=r,e=0;e<1<<T[n];e++)z[r++]=n;for(z[r-1]=n,i=0,n=0;n<16;n++)for(M[n]=i,e=0;e<1<<C[n];e++)O[i++]=n;for(i>>=7;n<m;n++)for(M[n]=i<<7,e=0;e<1<<C[n]-7;e++)O[256+i++]=n;for(t=0;t<=_;t++)a[t]=0;for(e=0;e<=143;)A[2*e+1]=8,e++,a[8]++;for(;e<=255;)A[2*e+1]=9,e++,a[9]++;for(;e<=279;)A[2*e+1]=7,e++,a[7]++;for(;e<=287;)A[2*e+1]=8,e++,a[8]++;for(H(A,p+1,a),e=0;e<m;e++)I[2*e+1]=5,I[2*e]=V(e,5);R=new L(A,T,d+1,p,_),P=new L(I,C,0,m,_),B=new L(new Array(0),N,0,g,y)}(),ee=!0),e.l_desc=new F(e.dyn_ltree,R),e.d_desc=new F(e.dyn_dtree,P),e.bl_desc=new F(e.bl_tree,B),e.bi_buf=0,e.bi_valid=0,$(e)},t._tr_stored_block=te,t._tr_flush_block=function(e,t,r,n){var u,l,f=0;e.level>0?(e.strm.data_type===s&&(e.strm.data_type=function(e){var t,r=4093624447;for(t=0;t<=31;t++,r>>>=1)if(1&r&&0!==e.dyn_ltree[2*t])return a;if(0!==e.dyn_ltree[18]||0!==e.dyn_ltree[20]||0!==e.dyn_ltree[26])return o;for(t=32;t<d;t++)if(0!==e.dyn_ltree[2*t])return o;return a}(e)),q(e,e.l_desc),q(e,e.d_desc),f=function(e){var t;for(J(e,e.dyn_ltree,e.l_desc.max_code),J(e,e.dyn_dtree,e.d_desc.max_code),q(e,e.bl_desc),t=g-1;t>=3&&0===e.bl_tree[2*S[t]+1];t--);return e.opt_len+=3*(t+1)+5+5+4,t}(e),u=e.opt_len+3+7>>>3,(l=e.static_len+3+7>>>3)<=u&&(u=l)):u=l=r+5,r+4<=u&&-1!==t?te(e,t,r,n):e.strategy===i||l===u?(X(e,(c<<1)+(n?1:0),3),K(e,A,I)):(X(e,(h<<1)+(n?1:0),3),function(e,t,r,n){var i;for(X(e,t-257,5),X(e,r-1,5),X(e,n-4,4),i=0;i<n;i++)X(e,e.bl_tree[2*S[i]+1],3);Q(e,e.dyn_ltree,t-1),Q(e,e.dyn_dtree,r-1)}(e,e.l_desc.max_code+1,e.d_desc.max_code+1,f+1),K(e,e.dyn_ltree,e.dyn_dtree)),$(e),n&&Y(e)},t._tr_tally=function(e,t,r){return e.pending_buf[e.d_buf+2*e.last_lit]=t>>>8&255,e.pending_buf[e.d_buf+2*e.last_lit+1]=255&t,e.pending_buf[e.l_buf+e.last_lit]=255&r,e.last_lit++,0===t?e.dyn_ltree[2*r]++:(e.matches++,t--,e.dyn_ltree[2*(z[r]+d+1)]++,e.dyn_dtree[2*U(t)]++),e.last_lit===e.lit_bufsize-1},t._tr_align=function(e){X(e,c<<1,3),Z(e,b,A),function(e){16===e.bi_valid?(j(e,e.bi_buf),e.bi_buf=0,e.bi_valid=0):e.bi_valid>=8&&(e.pending_buf[e.pending++]=255&e.bi_buf,e.bi_buf>>=8,e.bi_valid-=8)}(e)}},function(e,t,r){"use strict";var n=r(37),i=r(3),a=r(14),o=r(16),s=r(9),u=r(15),l=r(40),c=Object.prototype.toString;function h(e){if(!(this instanceof h))return new h(e);this.options=i.assign({chunkSize:16384,windowBits:0,to:""},e||{});var t=this.options;t.raw&&t.windowBits>=0&&t.windowBits<16&&(t.windowBits=-t.windowBits,0===t.windowBits&&(t.windowBits=-15)),!(t.windowBits>=0&&t.windowBits<16)||e&&e.windowBits||(t.windowBits+=32),t.windowBits>15&&t.windowBits<48&&0==(15&t.windowBits)&&(t.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new u,this.strm.avail_out=0;var r=n.inflateInit2(this.strm,t.windowBits);if(r!==o.Z_OK)throw new Error(s[r]);this.header=new l,n.inflateGetHeader(this.strm,this.header)}function f(e,t){var r=new h(t);if(r.push(e,!0),r.err)throw r.msg||s[r.err];return r.result}h.prototype.push=function(e,t){var r,s,u,l,h,f,d=this.strm,p=this.options.chunkSize,m=this.options.dictionary,g=!1;if(this.ended)return!1;s=t===~~t?t:!0===t?o.Z_FINISH:o.Z_NO_FLUSH,"string"==typeof e?d.input=a.binstring2buf(e):"[object ArrayBuffer]"===c.call(e)?d.input=new Uint8Array(e):d.input=e,d.next_in=0,d.avail_in=d.input.length;do{if(0===d.avail_out&&(d.output=new i.Buf8(p),d.next_out=0,d.avail_out=p),(r=n.inflate(d,o.Z_NO_FLUSH))===o.Z_NEED_DICT&&m&&(f="string"==typeof m?a.string2buf(m):"[object ArrayBuffer]"===c.call(m)?new Uint8Array(m):m,r=n.inflateSetDictionary(this.strm,f)),r===o.Z_BUF_ERROR&&!0===g&&(r=o.Z_OK,g=!1),r!==o.Z_STREAM_END&&r!==o.Z_OK)return this.onEnd(r),this.ended=!0,!1;d.next_out&&(0!==d.avail_out&&r!==o.Z_STREAM_END&&(0!==d.avail_in||s!==o.Z_FINISH&&s!==o.Z_SYNC_FLUSH)||("string"===this.options.to?(u=a.utf8border(d.output,d.next_out),l=d.next_out-u,h=a.buf2string(d.output,u),d.next_out=l,d.avail_out=p-l,l&&i.arraySet(d.output,d.output,u,l,0),this.onData(h)):this.onData(i.shrinkBuf(d.output,d.next_out)))),0===d.avail_in&&0===d.avail_out&&(g=!0)}while((d.avail_in>0||0===d.avail_out)&&r!==o.Z_STREAM_END);return r===o.Z_STREAM_END&&(s=o.Z_FINISH),s===o.Z_FINISH?(r=n.inflateEnd(this.strm),this.onEnd(r),this.ended=!0,r===o.Z_OK):s!==o.Z_SYNC_FLUSH||(this.onEnd(o.Z_OK),d.avail_out=0,!0)},h.prototype.onData=function(e){this.chunks.push(e)},h.prototype.onEnd=function(e){e===o.Z_OK&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=i.flattenChunks(this.chunks)),this.chunks=[],this.err=e,this.msg=this.strm.msg},t.Inflate=h,t.inflate=f,t.inflateRaw=function(e,t){return(t=t||{}).raw=!0,f(e,t)},t.ungzip=f},function(e,t,r){"use strict";var n=r(3),i=r(12),a=r(13),o=r(38),s=r(39),u=0,l=1,c=2,h=4,f=5,d=6,p=0,m=1,g=2,v=-2,_=-3,w=-4,y=-5,b=8,x=1,k=2,E=3,T=4,C=5,N=6,S=7,A=8,I=9,O=10,z=11,D=12,R=13,P=14,B=15,M=16,L=17,F=18,U=19,j=20,X=21,Z=22,V=23,H=24,$=25,Y=26,G=27,W=28,K=29,q=30,J=31,Q=32,ee=852,te=592,re=15;function ne(e){return(e>>>24&255)+(e>>>8&65280)+((65280&e)<<8)+((255&e)<<24)}function ie(e){var t;return e&&e.state?(t=e.state,e.total_in=e.total_out=t.total=0,e.msg="",t.wrap&&(e.adler=1&t.wrap),t.mode=x,t.last=0,t.havedict=0,t.dmax=32768,t.head=null,t.hold=0,t.bits=0,t.lencode=t.lendyn=new n.Buf32(ee),t.distcode=t.distdyn=new n.Buf32(te),t.sane=1,t.back=-1,p):v}function ae(e){var t;return e&&e.state?((t=e.state).wsize=0,t.whave=0,t.wnext=0,ie(e)):v}function oe(e,t){var r,n;return e&&e.state?(n=e.state,t<0?(r=0,t=-t):(r=1+(t>>4),t<48&&(t&=15)),t&&(t<8||t>15)?v:(null!==n.window&&n.wbits!==t&&(n.window=null),n.wrap=r,n.wbits=t,ae(e))):v}function se(e,t){var r,i;return e?(i=new function(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new n.Buf16(320),this.work=new n.Buf16(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0},e.state=i,i.window=null,(r=oe(e,t))!==p&&(e.state=null),r):v}var ue,le,ce=!0;function he(e){if(ce){var t;for(ue=new n.Buf32(512),le=new n.Buf32(32),t=0;t<144;)e.lens[t++]=8;for(;t<256;)e.lens[t++]=9;for(;t<280;)e.lens[t++]=7;for(;t<288;)e.lens[t++]=8;for(s(l,e.lens,0,288,ue,0,e.work,{bits:9}),t=0;t<32;)e.lens[t++]=5;s(c,e.lens,0,32,le,0,e.work,{bits:5}),ce=!1}e.lencode=ue,e.lenbits=9,e.distcode=le,e.distbits=5}function fe(e,t,r,i){var a,o=e.state;return null===o.window&&(o.wsize=1<<o.wbits,o.wnext=0,o.whave=0,o.window=new n.Buf8(o.wsize)),i>=o.wsize?(n.arraySet(o.window,t,r-o.wsize,o.wsize,0),o.wnext=0,o.whave=o.wsize):((a=o.wsize-o.wnext)>i&&(a=i),n.arraySet(o.window,t,r-i,a,o.wnext),(i-=a)?(n.arraySet(o.window,t,r-i,i,0),o.wnext=i,o.whave=o.wsize):(o.wnext+=a,o.wnext===o.wsize&&(o.wnext=0),o.whave<o.wsize&&(o.whave+=a))),0}t.inflateReset=ae,t.inflateReset2=oe,t.inflateResetKeep=ie,t.inflateInit=function(e){return se(e,re)},t.inflateInit2=se,t.inflate=function(e,t){var r,ee,te,re,ie,ae,oe,se,ue,le,ce,de,pe,me,ge,ve,_e,we,ye,be,xe,ke,Ee,Te,Ce=0,Ne=new n.Buf8(4),Se=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];if(!e||!e.state||!e.output||!e.input&&0!==e.avail_in)return v;(r=e.state).mode===D&&(r.mode=R),ie=e.next_out,te=e.output,oe=e.avail_out,re=e.next_in,ee=e.input,ae=e.avail_in,se=r.hold,ue=r.bits,le=ae,ce=oe,ke=p;e:for(;;)switch(r.mode){case x:if(0===r.wrap){r.mode=R;break}for(;ue<16;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}if(2&r.wrap&&35615===se){r.check=0,Ne[0]=255&se,Ne[1]=se>>>8&255,r.check=a(r.check,Ne,2,0),se=0,ue=0,r.mode=k;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&se)<<8)+(se>>8))%31){e.msg="incorrect header check",r.mode=q;break}if((15&se)!==b){e.msg="unknown compression method",r.mode=q;break}if(ue-=4,xe=8+(15&(se>>>=4)),0===r.wbits)r.wbits=xe;else if(xe>r.wbits){e.msg="invalid window size",r.mode=q;break}r.dmax=1<<xe,e.adler=r.check=1,r.mode=512&se?O:D,se=0,ue=0;break;case k:for(;ue<16;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}if(r.flags=se,(255&r.flags)!==b){e.msg="unknown compression method",r.mode=q;break}if(57344&r.flags){e.msg="unknown header flags set",r.mode=q;break}r.head&&(r.head.text=se>>8&1),512&r.flags&&(Ne[0]=255&se,Ne[1]=se>>>8&255,r.check=a(r.check,Ne,2,0)),se=0,ue=0,r.mode=E;case E:for(;ue<32;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}r.head&&(r.head.time=se),512&r.flags&&(Ne[0]=255&se,Ne[1]=se>>>8&255,Ne[2]=se>>>16&255,Ne[3]=se>>>24&255,r.check=a(r.check,Ne,4,0)),se=0,ue=0,r.mode=T;case T:for(;ue<16;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}r.head&&(r.head.xflags=255&se,r.head.os=se>>8),512&r.flags&&(Ne[0]=255&se,Ne[1]=se>>>8&255,r.check=a(r.check,Ne,2,0)),se=0,ue=0,r.mode=C;case C:if(1024&r.flags){for(;ue<16;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}r.length=se,r.head&&(r.head.extra_len=se),512&r.flags&&(Ne[0]=255&se,Ne[1]=se>>>8&255,r.check=a(r.check,Ne,2,0)),se=0,ue=0}else r.head&&(r.head.extra=null);r.mode=N;case N:if(1024&r.flags&&((de=r.length)>ae&&(de=ae),de&&(r.head&&(xe=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Array(r.head.extra_len)),n.arraySet(r.head.extra,ee,re,de,xe)),512&r.flags&&(r.check=a(r.check,ee,de,re)),ae-=de,re+=de,r.length-=de),r.length))break e;r.length=0,r.mode=S;case S:if(2048&r.flags){if(0===ae)break e;de=0;do{xe=ee[re+de++],r.head&&xe&&r.length<65536&&(r.head.name+=String.fromCharCode(xe))}while(xe&&de<ae);if(512&r.flags&&(r.check=a(r.check,ee,de,re)),ae-=de,re+=de,xe)break e}else r.head&&(r.head.name=null);r.length=0,r.mode=A;case A:if(4096&r.flags){if(0===ae)break e;de=0;do{xe=ee[re+de++],r.head&&xe&&r.length<65536&&(r.head.comment+=String.fromCharCode(xe))}while(xe&&de<ae);if(512&r.flags&&(r.check=a(r.check,ee,de,re)),ae-=de,re+=de,xe)break e}else r.head&&(r.head.comment=null);r.mode=I;case I:if(512&r.flags){for(;ue<16;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}if(se!==(65535&r.check)){e.msg="header crc mismatch",r.mode=q;break}se=0,ue=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),e.adler=r.check=0,r.mode=D;break;case O:for(;ue<32;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}e.adler=r.check=ne(se),se=0,ue=0,r.mode=z;case z:if(0===r.havedict)return e.next_out=ie,e.avail_out=oe,e.next_in=re,e.avail_in=ae,r.hold=se,r.bits=ue,g;e.adler=r.check=1,r.mode=D;case D:if(t===f||t===d)break e;case R:if(r.last){se>>>=7&ue,ue-=7&ue,r.mode=G;break}for(;ue<3;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}switch(r.last=1&se,ue-=1,3&(se>>>=1)){case 0:r.mode=P;break;case 1:if(he(r),r.mode=j,t===d){se>>>=2,ue-=2;break e}break;case 2:r.mode=L;break;case 3:e.msg="invalid block type",r.mode=q}se>>>=2,ue-=2;break;case P:for(se>>>=7&ue,ue-=7&ue;ue<32;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}if((65535&se)!=(se>>>16^65535)){e.msg="invalid stored block lengths",r.mode=q;break}if(r.length=65535&se,se=0,ue=0,r.mode=B,t===d)break e;case B:r.mode=M;case M:if(de=r.length){if(de>ae&&(de=ae),de>oe&&(de=oe),0===de)break e;n.arraySet(te,ee,re,de,ie),ae-=de,re+=de,oe-=de,ie+=de,r.length-=de;break}r.mode=D;break;case L:for(;ue<14;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}if(r.nlen=257+(31&se),se>>>=5,ue-=5,r.ndist=1+(31&se),se>>>=5,ue-=5,r.ncode=4+(15&se),se>>>=4,ue-=4,r.nlen>286||r.ndist>30){e.msg="too many length or distance symbols",r.mode=q;break}r.have=0,r.mode=F;case F:for(;r.have<r.ncode;){for(;ue<3;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}r.lens[Se[r.have++]]=7&se,se>>>=3,ue-=3}for(;r.have<19;)r.lens[Se[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,Ee={bits:r.lenbits},ke=s(u,r.lens,0,19,r.lencode,0,r.work,Ee),r.lenbits=Ee.bits,ke){e.msg="invalid code lengths set",r.mode=q;break}r.have=0,r.mode=U;case U:for(;r.have<r.nlen+r.ndist;){for(;ve=(Ce=r.lencode[se&(1<<r.lenbits)-1])>>>16&255,_e=65535&Ce,!((ge=Ce>>>24)<=ue);){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}if(_e<16)se>>>=ge,ue-=ge,r.lens[r.have++]=_e;else{if(16===_e){for(Te=ge+2;ue<Te;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}if(se>>>=ge,ue-=ge,0===r.have){e.msg="invalid bit length repeat",r.mode=q;break}xe=r.lens[r.have-1],de=3+(3&se),se>>>=2,ue-=2}else if(17===_e){for(Te=ge+3;ue<Te;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}ue-=ge,xe=0,de=3+(7&(se>>>=ge)),se>>>=3,ue-=3}else{for(Te=ge+7;ue<Te;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}ue-=ge,xe=0,de=11+(127&(se>>>=ge)),se>>>=7,ue-=7}if(r.have+de>r.nlen+r.ndist){e.msg="invalid bit length repeat",r.mode=q;break}for(;de--;)r.lens[r.have++]=xe}}if(r.mode===q)break;if(0===r.lens[256]){e.msg="invalid code -- missing end-of-block",r.mode=q;break}if(r.lenbits=9,Ee={bits:r.lenbits},ke=s(l,r.lens,0,r.nlen,r.lencode,0,r.work,Ee),r.lenbits=Ee.bits,ke){e.msg="invalid literal/lengths set",r.mode=q;break}if(r.distbits=6,r.distcode=r.distdyn,Ee={bits:r.distbits},ke=s(c,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,Ee),r.distbits=Ee.bits,ke){e.msg="invalid distances set",r.mode=q;break}if(r.mode=j,t===d)break e;case j:r.mode=X;case X:if(ae>=6&&oe>=258){e.next_out=ie,e.avail_out=oe,e.next_in=re,e.avail_in=ae,r.hold=se,r.bits=ue,o(e,ce),ie=e.next_out,te=e.output,oe=e.avail_out,re=e.next_in,ee=e.input,ae=e.avail_in,se=r.hold,ue=r.bits,r.mode===D&&(r.back=-1);break}for(r.back=0;ve=(Ce=r.lencode[se&(1<<r.lenbits)-1])>>>16&255,_e=65535&Ce,!((ge=Ce>>>24)<=ue);){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}if(ve&&0==(240&ve)){for(we=ge,ye=ve,be=_e;ve=(Ce=r.lencode[be+((se&(1<<we+ye)-1)>>we)])>>>16&255,_e=65535&Ce,!(we+(ge=Ce>>>24)<=ue);){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}se>>>=we,ue-=we,r.back+=we}if(se>>>=ge,ue-=ge,r.back+=ge,r.length=_e,0===ve){r.mode=Y;break}if(32&ve){r.back=-1,r.mode=D;break}if(64&ve){e.msg="invalid literal/length code",r.mode=q;break}r.extra=15&ve,r.mode=Z;case Z:if(r.extra){for(Te=r.extra;ue<Te;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}r.length+=se&(1<<r.extra)-1,se>>>=r.extra,ue-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=V;case V:for(;ve=(Ce=r.distcode[se&(1<<r.distbits)-1])>>>16&255,_e=65535&Ce,!((ge=Ce>>>24)<=ue);){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}if(0==(240&ve)){for(we=ge,ye=ve,be=_e;ve=(Ce=r.distcode[be+((se&(1<<we+ye)-1)>>we)])>>>16&255,_e=65535&Ce,!(we+(ge=Ce>>>24)<=ue);){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}se>>>=we,ue-=we,r.back+=we}if(se>>>=ge,ue-=ge,r.back+=ge,64&ve){e.msg="invalid distance code",r.mode=q;break}r.offset=_e,r.extra=15&ve,r.mode=H;case H:if(r.extra){for(Te=r.extra;ue<Te;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}r.offset+=se&(1<<r.extra)-1,se>>>=r.extra,ue-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){e.msg="invalid distance too far back",r.mode=q;break}r.mode=$;case $:if(0===oe)break e;if(de=ce-oe,r.offset>de){if((de=r.offset-de)>r.whave&&r.sane){e.msg="invalid distance too far back",r.mode=q;break}de>r.wnext?(de-=r.wnext,pe=r.wsize-de):pe=r.wnext-de,de>r.length&&(de=r.length),me=r.window}else me=te,pe=ie-r.offset,de=r.length;de>oe&&(de=oe),oe-=de,r.length-=de;do{te[ie++]=me[pe++]}while(--de);0===r.length&&(r.mode=X);break;case Y:if(0===oe)break e;te[ie++]=r.length,oe--,r.mode=X;break;case G:if(r.wrap){for(;ue<32;){if(0===ae)break e;ae--,se|=ee[re++]<<ue,ue+=8}if(ce-=oe,e.total_out+=ce,r.total+=ce,ce&&(e.adler=r.check=r.flags?a(r.check,te,ce,ie-ce):i(r.check,te,ce,ie-ce)),ce=oe,(r.flags?se:ne(se))!==r.check){e.msg="incorrect data check",r.mode=q;break}se=0,ue=0}r.mode=W;case W:if(r.wrap&&r.flags){for(;ue<32;){if(0===ae)break e;ae--,se+=ee[re++]<<ue,ue+=8}if(se!==(4294967295&r.total)){e.msg="incorrect length check",r.mode=q;break}se=0,ue=0}r.mode=K;case K:ke=m;break e;case q:ke=_;break e;case J:return w;case Q:default:return v}return e.next_out=ie,e.avail_out=oe,e.next_in=re,e.avail_in=ae,r.hold=se,r.bits=ue,(r.wsize||ce!==e.avail_out&&r.mode<q&&(r.mode<G||t!==h))&&fe(e,e.output,e.next_out,ce-e.avail_out)?(r.mode=J,w):(le-=e.avail_in,ce-=e.avail_out,e.total_in+=le,e.total_out+=ce,r.total+=ce,r.wrap&&ce&&(e.adler=r.check=r.flags?a(r.check,te,ce,e.next_out-ce):i(r.check,te,ce,e.next_out-ce)),e.data_type=r.bits+(r.last?64:0)+(r.mode===D?128:0)+(r.mode===j||r.mode===B?256:0),(0===le&&0===ce||t===h)&&ke===p&&(ke=y),ke)},t.inflateEnd=function(e){if(!e||!e.state)return v;var t=e.state;return t.window&&(t.window=null),e.state=null,p},t.inflateGetHeader=function(e,t){var r;return e&&e.state?0==(2&(r=e.state).wrap)?v:(r.head=t,t.done=!1,p):v},t.inflateSetDictionary=function(e,t){var r,n=t.length;return e&&e.state?0!==(r=e.state).wrap&&r.mode!==z?v:r.mode===z&&i(1,t,n,0)!==r.check?_:fe(e,t,n,n)?(r.mode=J,w):(r.havedict=1,p):v},t.inflateInfo="pako inflate (from Nodeca project)"},function(e,t,r){"use strict";e.exports=function(e,t){var r,n,i,a,o,s,u,l,c,h,f,d,p,m,g,v,_,w,y,b,x,k,E,T,C;r=e.state,n=e.next_in,T=e.input,i=n+(e.avail_in-5),a=e.next_out,C=e.output,o=a-(t-e.avail_out),s=a+(e.avail_out-257),u=r.dmax,l=r.wsize,c=r.whave,h=r.wnext,f=r.window,d=r.hold,p=r.bits,m=r.lencode,g=r.distcode,v=(1<<r.lenbits)-1,_=(1<<r.distbits)-1;e:do{p<15&&(d+=T[n++]<<p,p+=8,d+=T[n++]<<p,p+=8),w=m[d&v];t:for(;;){if(d>>>=y=w>>>24,p-=y,0===(y=w>>>16&255))C[a++]=65535&w;else{if(!(16&y)){if(0==(64&y)){w=m[(65535&w)+(d&(1<<y)-1)];continue t}if(32&y){r.mode=12;break e}e.msg="invalid literal/length code",r.mode=30;break e}b=65535&w,(y&=15)&&(p<y&&(d+=T[n++]<<p,p+=8),b+=d&(1<<y)-1,d>>>=y,p-=y),p<15&&(d+=T[n++]<<p,p+=8,d+=T[n++]<<p,p+=8),w=g[d&_];r:for(;;){if(d>>>=y=w>>>24,p-=y,!(16&(y=w>>>16&255))){if(0==(64&y)){w=g[(65535&w)+(d&(1<<y)-1)];continue r}e.msg="invalid distance code",r.mode=30;break e}if(x=65535&w,p<(y&=15)&&(d+=T[n++]<<p,(p+=8)<y&&(d+=T[n++]<<p,p+=8)),(x+=d&(1<<y)-1)>u){e.msg="invalid distance too far back",r.mode=30;break e}if(d>>>=y,p-=y,x>(y=a-o)){if((y=x-y)>c&&r.sane){e.msg="invalid distance too far back",r.mode=30;break e}if(k=0,E=f,0===h){if(k+=l-y,y<b){b-=y;do{C[a++]=f[k++]}while(--y);k=a-x,E=C}}else if(h<y){if(k+=l+h-y,(y-=h)<b){b-=y;do{C[a++]=f[k++]}while(--y);if(k=0,h<b){b-=y=h;do{C[a++]=f[k++]}while(--y);k=a-x,E=C}}}else if(k+=h-y,y<b){b-=y;do{C[a++]=f[k++]}while(--y);k=a-x,E=C}for(;b>2;)C[a++]=E[k++],C[a++]=E[k++],C[a++]=E[k++],b-=3;b&&(C[a++]=E[k++],b>1&&(C[a++]=E[k++]))}else{k=a-x;do{C[a++]=C[k++],C[a++]=C[k++],C[a++]=C[k++],b-=3}while(b>2);b&&(C[a++]=C[k++],b>1&&(C[a++]=C[k++]))}break}}break}}while(n<i&&a<s);n-=b=p>>3,d&=(1<<(p-=b<<3))-1,e.next_in=n,e.next_out=a,e.avail_in=n<i?i-n+5:5-(n-i),e.avail_out=a<s?s-a+257:257-(a-s),r.hold=d,r.bits=p}},function(e,t,r){"use strict";var n=r(3),i=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0],a=[16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78],o=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0],s=[16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64];e.exports=function(e,t,r,u,l,c,h,f){var d,p,m,g,v,_,w,y,b,x=f.bits,k=0,E=0,T=0,C=0,N=0,S=0,A=0,I=0,O=0,z=0,D=null,R=0,P=new n.Buf16(16),B=new n.Buf16(16),M=null,L=0;for(k=0;k<=15;k++)P[k]=0;for(E=0;E<u;E++)P[t[r+E]]++;for(N=x,C=15;C>=1&&0===P[C];C--);if(N>C&&(N=C),0===C)return l[c++]=20971520,l[c++]=20971520,f.bits=1,0;for(T=1;T<C&&0===P[T];T++);for(N<T&&(N=T),I=1,k=1;k<=15;k++)if(I<<=1,(I-=P[k])<0)return-1;if(I>0&&(0===e||1!==C))return-1;for(B[1]=0,k=1;k<15;k++)B[k+1]=B[k]+P[k];for(E=0;E<u;E++)0!==t[r+E]&&(h[B[t[r+E]]++]=E);if(0===e?(D=M=h,_=19):1===e?(D=i,R-=257,M=a,L-=257,_=256):(D=o,M=s,_=-1),z=0,E=0,k=T,v=c,S=N,A=0,m=-1,g=(O=1<<N)-1,1===e&&O>852||2===e&&O>592)return 1;for(;;){w=k-A,h[E]<_?(y=0,b=h[E]):h[E]>_?(y=M[L+h[E]],b=D[R+h[E]]):(y=96,b=0),d=1<<k-A,T=p=1<<S;do{l[v+(z>>A)+(p-=d)]=w<<24|y<<16|b|0}while(0!==p);for(d=1<<k-1;z&d;)d>>=1;if(0!==d?(z&=d-1,z+=d):z=0,E++,0==--P[k]){if(k===C)break;k=t[r+h[E]]}if(k>N&&(z&g)!==m){for(0===A&&(A=N),v+=T,I=1<<(S=k-A);S+A<C&&!((I-=P[S+A])<=0);)S++,I<<=1;if(O+=1<<S,1===e&&O>852||2===e&&O>592)return 1;l[m=z&g]=N<<24|S<<16|v-c|0}}return 0!==z&&(l[v+z]=k-A<<24|64<<16|0),f.bits=N,0}},function(e,t,r){"use strict";e.exports=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1}},function(e,t,r){"use strict";var n=r(2),i=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,936918e3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117];e.exports=function(e,t){if(void 0===e||!e.length)return 0;var r="string"!==n.getTypeOf(e);void 0===t&&(t=0);var a=0;t^=-1;for(var o=0,s=e.length;o<s;o++)a=r?e[o]:e.charCodeAt(o),t=t>>>8^i[255&(t^a)];return-1^t}},function(e,t,r){"use strict";var n=r(2),i=function(){this.data=[]};i.prototype={append:function(e){e=n.transformTo("string",e),this.data.push(e)},finalize:function(){return this.data.join("")}},e.exports=i},function(e,t,r){"use strict";var n=r(2),i=function(e){this.data=new Uint8Array(e),this.index=0};i.prototype={append:function(e){0!==e.length&&(e=n.transformTo("uint8array",e),this.data.set(e,this.index),this.index+=e.length)},finalize:function(){return this.data}},e.exports=i},function(e,t,r){"use strict";var n=r(6),i=r(20),a=r(2),o=r(45);e.exports=function(e,t){var r,s,u,l;for((t=a.extend(t||{},{base64:!1,checkCRC32:!1,optimizedBinaryString:!1,createFolders:!1,decodeFileName:i.utf8decode})).base64&&(e=n.decode(e)),r=(s=new o(e,t)).files,u=0;u<r.length;u++)l=r[u],this.file(l.fileNameStr,l.decompressed,{binary:!0,optimizedBinaryString:!0,date:l.date,dir:l.dir,comment:l.fileCommentStr.length?l.fileCommentStr:null,unixPermissions:l.unixPermissions,dosPermissions:l.dosPermissions,createFolders:t.createFolders});return s.zipComment.length&&(this.comment=s.zipComment),this}},function(e,t,r){"use strict";var n=r(21),i=r(46),a=r(23),o=r(24),s=r(2),u=r(17),l=r(47),c=r(4);r(7);function h(e,t){this.files=[],this.loadOptions=t,e&&this.load(e)}h.prototype={checkSignature:function(e){var t=this.reader.readString(4);if(t!==e)throw new Error("Corrupted zip or bug : unexpected signature ("+s.pretty(t)+", expected "+s.pretty(e)+")")},isSignature:function(e,t){var r=this.reader.index;this.reader.setIndex(e);var n=this.reader.readString(4)===t;return this.reader.setIndex(r),n},readBlockEndOfCentral:function(){this.diskNumber=this.reader.readInt(2),this.diskWithCentralDirStart=this.reader.readInt(2),this.centralDirRecordsOnThisDisk=this.reader.readInt(2),this.centralDirRecords=this.reader.readInt(2),this.centralDirSize=this.reader.readInt(4),this.centralDirOffset=this.reader.readInt(4),this.zipCommentLength=this.reader.readInt(2);var e=this.reader.readData(this.zipCommentLength),t=c.uint8array?"uint8array":"array",r=s.transformTo(t,e);this.zipComment=this.loadOptions.decodeFileName(r)},readBlockZip64EndOfCentral:function(){this.zip64EndOfCentralSize=this.reader.readInt(8),this.versionMadeBy=this.reader.readString(2),this.versionNeeded=this.reader.readInt(2),this.diskNumber=this.reader.readInt(4),this.diskWithCentralDirStart=this.reader.readInt(4),this.centralDirRecordsOnThisDisk=this.reader.readInt(8),this.centralDirRecords=this.reader.readInt(8),this.centralDirSize=this.reader.readInt(8),this.centralDirOffset=this.reader.readInt(8),this.zip64ExtensibleData={};for(var e,t,r,n=this.zip64EndOfCentralSize-44;0<n;)e=this.reader.readInt(2),t=this.reader.readInt(4),r=this.reader.readString(t),this.zip64ExtensibleData[e]={id:e,length:t,value:r}},readBlockZip64EndOfCentralLocator:function(){if(this.diskWithZip64CentralDirStart=this.reader.readInt(4),this.relativeOffsetEndOfZip64CentralDir=this.reader.readInt(8),this.disksCount=this.reader.readInt(4),this.disksCount>1)throw new Error("Multi-volumes zip are not supported")},readLocalFiles:function(){var e,t;for(e=0;e<this.files.length;e++)t=this.files[e],this.reader.setIndex(t.localHeaderOffset),this.checkSignature(u.LOCAL_FILE_HEADER),t.readLocalPart(this.reader),t.handleUTF8(),t.processAttributes()},readCentralDir:function(){var e;for(this.reader.setIndex(this.centralDirOffset);this.reader.readString(4)===u.CENTRAL_FILE_HEADER;)(e=new l({zip64:this.zip64},this.loadOptions)).readCentralPart(this.reader),this.files.push(e);if(this.centralDirRecords!==this.files.length&&0!==this.centralDirRecords&&0===this.files.length)throw new Error("Corrupted zip or bug: expected "+this.centralDirRecords+" records in central dir, got "+this.files.length)},readEndOfCentral:function(){var e=this.reader.lastIndexOfSignature(u.CENTRAL_DIRECTORY_END);if(e<0)throw!this.isSignature(0,u.LOCAL_FILE_HEADER)?new Error("Can't find end of central directory : is this a zip file ? If it is, see http://stuk.github.io/jszip/documentation/howto/read_zip.html"):new Error("Corrupted zip : can't find end of central directory");this.reader.setIndex(e);var t=e;if(this.checkSignature(u.CENTRAL_DIRECTORY_END),this.readBlockEndOfCentral(),this.diskNumber===s.MAX_VALUE_16BITS||this.diskWithCentralDirStart===s.MAX_VALUE_16BITS||this.centralDirRecordsOnThisDisk===s.MAX_VALUE_16BITS||this.centralDirRecords===s.MAX_VALUE_16BITS||this.centralDirSize===s.MAX_VALUE_32BITS||this.centralDirOffset===s.MAX_VALUE_32BITS){if(this.zip64=!0,(e=this.reader.lastIndexOfSignature(u.ZIP64_CENTRAL_DIRECTORY_LOCATOR))<0)throw new Error("Corrupted zip : can't find the ZIP64 end of central directory locator");if(this.reader.setIndex(e),this.checkSignature(u.ZIP64_CENTRAL_DIRECTORY_LOCATOR),this.readBlockZip64EndOfCentralLocator(),!this.isSignature(this.relativeOffsetEndOfZip64CentralDir,u.ZIP64_CENTRAL_DIRECTORY_END)&&(this.relativeOffsetEndOfZip64CentralDir=this.reader.lastIndexOfSignature(u.ZIP64_CENTRAL_DIRECTORY_END),this.relativeOffsetEndOfZip64CentralDir<0))throw new Error("Corrupted zip : can't find the ZIP64 end of central directory");this.reader.setIndex(this.relativeOffsetEndOfZip64CentralDir),this.checkSignature(u.ZIP64_CENTRAL_DIRECTORY_END),this.readBlockZip64EndOfCentral()}var r=this.centralDirOffset+this.centralDirSize;this.zip64&&(r+=20,r+=12+this.zip64EndOfCentralSize);var n=t-r;if(n>0)this.isSignature(t,u.CENTRAL_FILE_HEADER)||(this.reader.zero=n);else if(n<0)throw new Error("Corrupted zip: missing "+Math.abs(n)+" bytes.")},prepareReader:function(e){var t=s.getTypeOf(e);if(s.checkSupport(t),"string"!==t||c.uint8array)if("nodebuffer"===t)this.reader=new i(e);else if(c.uint8array)this.reader=new a(s.transformTo("uint8array",e));else{if(!c.array)throw new Error("Unexpected error: unsupported type '"+t+"'");this.reader=new o(s.transformTo("array",e))}else this.reader=new n(e,this.loadOptions.optimizedBinaryString)},load:function(e){this.prepareReader(e),this.readEndOfCentral(),this.readCentralDir(),this.readLocalFiles()}},e.exports=h},function(e,t,r){"use strict";var n=r(23);function i(e){this.data=e,this.length=this.data.length,this.index=0,this.zero=0}i.prototype=new n,i.prototype.readData=function(e){this.checkOffset(e);var t=this.data.slice(this.zero+this.index,this.zero+this.index+e);return this.index+=e,t},e.exports=i},function(e,t,r){"use strict";var n=r(21),i=r(2),a=r(19),o=r(7),s=r(4);function u(e,t){this.options=e,this.loadOptions=t}u.prototype={isEncrypted:function(){return 1==(1&this.bitFlag)},useUTF8:function(){return 2048==(2048&this.bitFlag)},prepareCompressedContent:function(e,t,r){return function(){var n=e.index;e.setIndex(t);var i=e.readData(r);return e.setIndex(n),i}},prepareContent:function(e,t,r,n,a){return function(){var e=i.transformTo(n.uncompressInputType,this.getCompressedContent()),t=n.uncompress(e);if(t.length!==a)throw new Error("Bug : uncompressed data size mismatch");return t}},readLocalPart:function(e){var t,r;if(e.skip(22),this.fileNameLength=e.readInt(2),r=e.readInt(2),this.fileName=e.readData(this.fileNameLength),e.skip(r),-1==this.compressedSize||-1==this.uncompressedSize)throw new Error("Bug or corrupted zip : didn't get enough informations from the central directory (compressedSize == -1 || uncompressedSize == -1)");if(null===(t=i.findCompression(this.compressionMethod)))throw new Error("Corrupted zip : compression "+i.pretty(this.compressionMethod)+" unknown (inner file : "+i.transformTo("string",this.fileName)+")");if(this.decompressed=new a,this.decompressed.compressedSize=this.compressedSize,this.decompressed.uncompressedSize=this.uncompressedSize,this.decompressed.crc32=this.crc32,this.decompressed.compressionMethod=this.compressionMethod,this.decompressed.getCompressedContent=this.prepareCompressedContent(e,e.index,this.compressedSize,t),this.decompressed.getContent=this.prepareContent(e,e.index,this.compressedSize,t,this.uncompressedSize),this.loadOptions.checkCRC32&&(this.decompressed=i.transformTo("string",this.decompressed.getContent()),o.crc32(this.decompressed)!==this.crc32))throw new Error("Corrupted zip : CRC32 mismatch")},readCentralPart:function(e){if(this.versionMadeBy=e.readInt(2),this.versionNeeded=e.readInt(2),this.bitFlag=e.readInt(2),this.compressionMethod=e.readString(2),this.date=e.readDate(),this.crc32=e.readInt(4),this.compressedSize=e.readInt(4),this.uncompressedSize=e.readInt(4),this.fileNameLength=e.readInt(2),this.extraFieldsLength=e.readInt(2),this.fileCommentLength=e.readInt(2),this.diskNumberStart=e.readInt(2),this.internalFileAttributes=e.readInt(2),this.externalFileAttributes=e.readInt(4),this.localHeaderOffset=e.readInt(4),this.isEncrypted())throw new Error("Encrypted zip are not supported");this.fileName=e.readData(this.fileNameLength),this.readExtraFields(e),this.parseZIP64ExtraField(e),this.fileComment=e.readData(this.fileCommentLength)},processAttributes:function(){this.unixPermissions=null,this.dosPermissions=null;var e=this.versionMadeBy>>8;this.dir=!!(16&this.externalFileAttributes),0===e&&(this.dosPermissions=63&this.externalFileAttributes),3===e&&(this.unixPermissions=this.externalFileAttributes>>16&65535),this.dir||"/"!==this.fileNameStr.slice(-1)||(this.dir=!0)},parseZIP64ExtraField:function(e){if(this.extraFields[1]){var t=new n(this.extraFields[1].value);this.uncompressedSize===i.MAX_VALUE_32BITS&&(this.uncompressedSize=t.readInt(8)),this.compressedSize===i.MAX_VALUE_32BITS&&(this.compressedSize=t.readInt(8)),this.localHeaderOffset===i.MAX_VALUE_32BITS&&(this.localHeaderOffset=t.readInt(8)),this.diskNumberStart===i.MAX_VALUE_32BITS&&(this.diskNumberStart=t.readInt(4))}},readExtraFields:function(e){var t,r,n,i=e.index;for(this.extraFields=this.extraFields||{};e.index<i+this.extraFieldsLength;)t=e.readInt(2),r=e.readInt(2),n=e.readString(r),this.extraFields[t]={id:t,length:r,value:n}},handleUTF8:function(){var e=s.uint8array?"uint8array":"array";if(this.useUTF8())this.fileNameStr=o.utf8decode(this.fileName),this.fileCommentStr=o.utf8decode(this.fileComment);else{var t=this.findExtraFieldUnicodePath();if(null!==t)this.fileNameStr=t;else{var r=i.transformTo(e,this.fileName);this.fileNameStr=this.loadOptions.decodeFileName(r)}var n=this.findExtraFieldUnicodeComment();if(null!==n)this.fileCommentStr=n;else{var a=i.transformTo(e,this.fileComment);this.fileCommentStr=this.loadOptions.decodeFileName(a)}}},findExtraFieldUnicodePath:function(){var e=this.extraFields[28789];if(e){var t=new n(e.value);return 1!==t.readInt(1)?null:o.crc32(this.fileName)!==t.readInt(4)?null:o.utf8decode(t.readString(e.length-5))}return null},findExtraFieldUnicodeComment:function(){var e=this.extraFields[25461];if(e){var t=new n(e.value);return 1!==t.readInt(1)?null:o.crc32(this.fileComment)!==t.readInt(4)?null:o.utf8decode(t.readString(e.length-5))}return null}},e.exports=u},function(e,t,r){"use strict";var n=r(2);t.string2binary=function(e){return n.string2binary(e)},t.string2Uint8Array=function(e){return n.transformTo("uint8array",e)},t.uint8Array2String=function(e){return n.transformTo("string",e)},t.string2Blob=function(e){var t=n.transformTo("arraybuffer",e);return n.arrayBuffer2Blob(t)},t.arrayBuffer2Blob=function(e){return n.arrayBuffer2Blob(e)},t.transformTo=function(e,t){return n.transformTo(e,t)},t.getTypeOf=function(e){return n.getTypeOf(e)},t.checkSupport=function(e){return n.checkSupport(e)},t.MAX_VALUE_16BITS=n.MAX_VALUE_16BITS,t.MAX_VALUE_32BITS=n.MAX_VALUE_32BITS,t.pretty=function(e){return n.pretty(e)},t.findCompression=function(e){return n.findCompression(e)},t.isRegExp=function(e){return n.isRegExp(e)}},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=r(0);i.traits=r(11),i.moduleWrapper=r(5);var a=r(26),o=i.defaults,s=i.str2xml,u=i.xml2str,l=i.moduleWrapper,c=i.utf8ToWord,h=i.concatArrays,f=i.unique,d=r(1),p=d.XTInternalError,m=d.throwFileTypeNotIdentified,g=d.throwFileTypeNotHandled,v=d.throwApiVersionError,_=[3,7,0],w=function(){function e(){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),arguments.length>0)throw new Error("The constructor with parameters has been removed in docxtemplater 3, please check the upgrade guide.");this.compiled={},this.modules=[],this.setOptions({})}return function(e,t,r){t&&n(e.prototype,t),r&&n(e,r)}(e,[{key:"getModuleApiVersion",value:function(){return _.join(".")}},{key:"verifyApiVersion",value:function(e){return 3!==(e=e.split(".").map(function(e){return parseInt(e,10)})).length&&v("neededVersion is not a valid version",{neededVersion:e,explanation:"the neededVersion must be an array of length 3"}),e[0]!==_[0]&&v("The major api version do not match, you probably have to update docxtemplater with npm install --save docxtemplater",{neededVersion:e,currentModuleApiVersion:_,explanation:"moduleAPIVersionMismatch : needed=".concat(e.join("."),", current=").concat(_.join("."))}),e[1]>_[1]&&v("The minor api version is not uptodate, you probably have to update docxtemplater with npm install --save docxtemplater",{neededVersion:e,currentModuleApiVersion:_,explanation:"moduleAPIVersionMismatch : needed=".concat(e.join("."),", current=").concat(_.join("."))}),!0}},{key:"setModules",value:function(e){this.modules.forEach(function(t){t.set(e)})}},{key:"sendEvent",value:function(e){this.modules.forEach(function(t){t.on(e)})}},{key:"attachModule",value:function(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{}).prefix;return t&&(e.prefix=t),this.modules.push(l(e)),this}},{key:"setOptions",value:function(e){var t=this;return e.delimiters&&(e.delimiters.start=c(e.delimiters.start),e.delimiters.end=c(e.delimiters.end)),this.options=e,Object.keys(o).forEach(function(e){var r=o[e];t.options[e]=null!=t.options[e]?t.options[e]:r,t[e]=t.options[e]}),this.zip&&this.updateFileTypeConfig(),this}},{key:"loadZip",value:function(e){if(e.loadAsync)throw new p("Docxtemplater doesn't handle JSZip version >=3, see changelog");return this.zip=e,this.updateFileTypeConfig(),this.modules=h([this.fileTypeConfig.baseModules.map(function(e){return e()}),this.modules]),this}},{key:"compileFile",value:function(e){var t=this.createTemplateClass(e);t.parse(),this.compiled[e]=t}},{key:"resolveData",value:function(e){var t=this;return Promise.all(Object.keys(this.compiled).map(function(r){return t.compiled[r].resolveTags(e)})).then(function(e){return h(e)})}},{key:"compile",value:function(){var e=this;return Object.keys(this.compiled).length?this:(this.options=this.modules.reduce(function(t,r){return r.optionsTransformer(t,e)},this.options),this.options.xmlFileNames=f(this.options.xmlFileNames),this.xmlDocuments=this.options.xmlFileNames.reduce(function(t,r){var n=e.zip.files[r].asText();return t[r]=s(n),t},{}),this.setModules({zip:this.zip,xmlDocuments:this.xmlDocuments}),this.getTemplatedFiles(),this.setModules({compiled:this.compiled}),this.templatedFiles.forEach(function(t){null!=e.zip.files[t]&&e.compileFile(t)}),this)}},{key:"updateFileTypeConfig",value:function(){var t;return this.zip.files.mimetype&&(t="odt"),(this.zip.files["word/document.xml"]||this.zip.files["word/document2.xml"])&&(t="docx"),this.zip.files["ppt/presentation.xml"]&&(t="pptx"),"odt"===t&&g(t),t||m(),this.fileType=t,this.fileTypeConfig=this.options.fileTypeConfig||e.FileTypeConfig[this.fileType],this}},{key:"render",value:function(){var e=this;return this.compile(),this.setModules({data:this.data,Lexer:a}),this.mapper=this.modules.reduce(function(e,t){return t.getRenderedMap(e)},{}),this.fileTypeConfig.tagsXmlLexedArray=f(this.fileTypeConfig.tagsXmlLexedArray),this.fileTypeConfig.tagsXmlTextArray=f(this.fileTypeConfig.tagsXmlTextArray),Object.keys(this.mapper).forEach(function(t){var r=e.mapper[t],n=r.from,i=r.data,a=e.compiled[n];a.setTags(i),a.render(t),e.zip.file(t,a.content,{createFolders:!0})}),this.sendEvent("syncing-zip"),this.syncZip(),this}},{key:"syncZip",value:function(){var e=this;Object.keys(this.xmlDocuments).forEach(function(t){e.zip.remove(t);var r=u(e.xmlDocuments[t]);return e.zip.file(t,r,{createFolders:!0})})}},{key:"setData",value:function(e){return this.data=e,this}},{key:"getZip",value:function(){return this.zip}},{key:"createTemplateClass",value:function(e){var t=this.zip.files[e].asText();return this.createTemplateClassFromContent(t,e)}},{key:"createTemplateClassFromContent",value:function(t,r){var n=this,i={filePath:r};return Object.keys(o).forEach(function(e){i[e]=n[e]}),i.fileTypeConfig=this.fileTypeConfig,i.modules=this.modules,new e.XmlTemplater(t,i)}},{key:"getFullText",value:function(e){return this.createTemplateClass(e||this.fileTypeConfig.textPath(this.zip)).getFullText()}},{key:"getTemplatedFiles",value:function(){return this.templatedFiles=this.fileTypeConfig.getTemplatedFiles(this.zip),this.templatedFiles}}]),e}();w.DocUtils=i,w.Errors=r(1),w.XmlTemplater=r(52),w.FileTypeConfig=r(58),w.XmlMatcher=r(27),e.exports=w},function(e,t,r){function n(e){this.options=e||{locator:{}}}function i(){this.cdata=!1}function a(e,t){t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber}function o(e){if(e)return"\n@"+(e.systemId||"")+"#[line:"+e.lineNumber+",col:"+e.columnNumber+"]"}function s(e,t,r){return"string"==typeof e?e.substr(t,r):e.length>=t+r||t?new java.lang.String(e,t,r)+"":e}function u(e,t){e.currentElement?e.currentElement.appendChild(t):e.doc.appendChild(t)}n.prototype.parseFromString=function(e,t){var r=this.options,n=new l,a=r.domBuilder||new i,s=r.errorHandler,u=r.locator,c=r.xmlns||{},h={lt:"<",gt:">",amp:"&",quot:'"',apos:"'"};return u&&a.setDocumentLocator(u),n.errorHandler=function(e,t,r){if(!e){if(t instanceof i)return t;e=t}var n={},a=e instanceof Function;function s(t){var i=e[t];!i&&a&&(i=2==e.length?function(r){e(t,r)}:e),n[t]=i&&function(e){i("[xmldom "+t+"]\t"+e+o(r))}||function(){}}return r=r||{},s("warning"),s("error"),s("fatalError"),n}(s,a,u),n.domBuilder=r.domBuilder||a,/\/x?html?$/.test(t)&&(h.nbsp=" ",h.copy="©",c[""]="http://www.w3.org/1999/xhtml"),c.xml=c.xml||"http://www.w3.org/XML/1998/namespace",e?n.parse(e,c,h):n.errorHandler.error("invalid doc source"),a.doc},i.prototype={startDocument:function(){this.doc=(new c).createDocument(null,null,null),this.locator&&(this.doc.documentURI=this.locator.systemId)},startElement:function(e,t,r,n){var i=this.doc,o=i.createElementNS(e,r||t),s=n.length;u(this,o),this.currentElement=o,this.locator&&a(this.locator,o);for(var l=0;l<s;l++){e=n.getURI(l);var c=n.getValue(l),h=(r=n.getQName(l),i.createAttributeNS(e,r));this.locator&&a(n.getLocator(l),h),h.value=h.nodeValue=c,o.setAttributeNode(h)}},endElement:function(e,t,r){var n=this.currentElement;n.tagName;this.currentElement=n.parentNode},startPrefixMapping:function(e,t){},endPrefixMapping:function(e){},processingInstruction:function(e,t){var r=this.doc.createProcessingInstruction(e,t);this.locator&&a(this.locator,r),u(this,r)},ignorableWhitespace:function(e,t,r){},characters:function(e,t,r){if(e=s.apply(this,arguments)){if(this.cdata)var n=this.doc.createCDATASection(e);else n=this.doc.createTextNode(e);this.currentElement?this.currentElement.appendChild(n):/^\s*$/.test(e)&&this.doc.appendChild(n),this.locator&&a(this.locator,n)}},skippedEntity:function(e){},endDocument:function(){this.doc.normalize()},setDocumentLocator:function(e){(this.locator=e)&&(e.lineNumber=0)},comment:function(e,t,r){e=s.apply(this,arguments);var n=this.doc.createComment(e);this.locator&&a(this.locator,n),u(this,n)},startCDATA:function(){this.cdata=!0},endCDATA:function(){this.cdata=!1},startDTD:function(e,t,r){var n=this.doc.implementation;if(n&&n.createDocumentType){var i=n.createDocumentType(e,t,r);this.locator&&a(this.locator,i),u(this,i)}},warning:function(e){console.warn("[xmldom warning]\t"+e,o(this.locator))},error:function(e){console.error("[xmldom error]\t"+e,o(this.locator))},fatalError:function(e){throw console.error("[xmldom fatalError]\t"+e,o(this.locator)),e}},"endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(/\w+/g,function(e){i.prototype[e]=function(){return null}});var l=r(51).XMLReader,c=t.DOMImplementation=r(25).DOMImplementation;t.XMLSerializer=r(25).XMLSerializer,t.DOMParser=n},function(e,t){var r=/[A-Z_a-z\xC0-\xD6\xD8-\xF6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,n=new RegExp("[\\-\\.0-9"+r.source.slice(1,-1)+"\\u00B7\\u0300-\\u036F\\u203F-\\u2040]"),i=new RegExp("^"+r.source+n.source+"*(?::"+r.source+n.source+"*)?$"),a=0,o=1,s=2,u=3,l=4,c=5,h=6,f=7;function d(){}function p(e,t){return t.lineNumber=e.lineNumber,t.columnNumber=e.columnNumber,t}function m(e,t,r,n,i,d){for(var p,m=++t,g=a;;){var v=e.charAt(m);switch(v){case"=":if(g===o)p=e.slice(t,m),g=u;else{if(g!==s)throw new Error("attribute equal must after attrName");g=u}break;case"'":case'"':if(g===u||g===o){if(g===o&&(d.warning('attribute value must after "="'),p=e.slice(t,m)),t=m+1,!((m=e.indexOf(v,t))>0))throw new Error("attribute value no end '"+v+"' match");_=e.slice(t,m).replace(/&#?\w+;/g,i),r.add(p,_,t-1),g=c}else{if(g!=l)throw new Error('attribute value must after "="');_=e.slice(t,m).replace(/&#?\w+;/g,i),r.add(p,_,t),d.warning('attribute "'+p+'" missed start quot('+v+")!!"),t=m+1,g=c}break;case"/":switch(g){case a:r.setTagName(e.slice(t,m));case c:case h:case f:g=f,r.closed=!0;case l:case o:case s:break;default:throw new Error("attribute invalid close char('/')")}break;case"":return d.error("unexpected end of input"),g==a&&r.setTagName(e.slice(t,m)),m;case">":switch(g){case a:r.setTagName(e.slice(t,m));case c:case h:case f:break;case l:case o:"/"===(_=e.slice(t,m)).slice(-1)&&(r.closed=!0,_=_.slice(0,-1));case s:g===s&&(_=p),g==l?(d.warning('attribute "'+_+'" missed quot(")!!'),r.add(p,_.replace(/&#?\w+;/g,i),t)):("http://www.w3.org/1999/xhtml"===n[""]&&_.match(/^(?:disabled|checked|selected)$/i)||d.warning('attribute "'+_+'" missed value!! "'+_+'" instead!!'),r.add(_,_,t));break;case u:throw new Error("attribute value missed!!")}return m;case"":v=" ";default:if(v<=" ")switch(g){case a:r.setTagName(e.slice(t,m)),g=h;break;case o:p=e.slice(t,m),g=s;break;case l:var _=e.slice(t,m).replace(/&#?\w+;/g,i);d.warning('attribute "'+_+'" missed quot(")!!'),r.add(p,_,t);case c:g=h}else switch(g){case s:r.tagName;"http://www.w3.org/1999/xhtml"===n[""]&&p.match(/^(?:disabled|checked|selected)$/i)||d.warning('attribute "'+p+'" missed value!! "'+p+'" instead2!!'),r.add(p,p,t),t=m,g=o;break;case c:d.warning('attribute space is required"'+p+'"!!');case h:g=o,t=m;break;case u:g=l,t=m;break;case f:throw new Error("elements closed character '/' and '>' must be connected to")}}m++}}function g(e,t,r){for(var n=e.tagName,i=null,a=e.length;a--;){var o=e[a],s=o.qName,u=o.value;if((f=s.indexOf(":"))>0)var l=o.prefix=s.slice(0,f),c=s.slice(f+1),h="xmlns"===l&&c;else c=s,l=null,h="xmlns"===s&&"";o.localName=c,!1!==h&&(null==i&&(i={},w(r,r={})),r[h]=i[h]=u,o.uri="http://www.w3.org/2000/xmlns/",t.startPrefixMapping(h,u))}for(a=e.length;a--;){(l=(o=e[a]).prefix)&&("xml"===l&&(o.uri="http://www.w3.org/XML/1998/namespace"),"xmlns"!==l&&(o.uri=r[l||""]))}var f;(f=n.indexOf(":"))>0?(l=e.prefix=n.slice(0,f),c=e.localName=n.slice(f+1)):(l=null,c=e.localName=n);var d=e.uri=r[l||""];if(t.startElement(d,c,n,e),!e.closed)return e.currentNSMap=r,e.localNSMap=i,!0;if(t.endElement(d,c,n),i)for(l in i)t.endPrefixMapping(l)}function v(e,t,r,n,i){if(/^(?:script|textarea)$/i.test(r)){var a=e.indexOf("</"+r+">",t),o=e.substring(t+1,a);if(/[&<]/.test(o))return/^script$/i.test(r)?(i.characters(o,0,o.length),a):(o=o.replace(/&#?\w+;/g,n),i.characters(o,0,o.length),a)}return t+1}function _(e,t,r,n){var i=n[r];return null==i&&((i=e.lastIndexOf("</"+r+">"))<t&&(i=e.lastIndexOf("</"+r)),n[r]=i),i<t}function w(e,t){for(var r in e)t[r]=e[r]}function y(e,t,r,n){switch(e.charAt(t+2)){case"-":return"-"===e.charAt(t+3)?(i=e.indexOf("--\x3e",t+4))>t?(r.comment(e,t+4,i-t-4),i+3):(n.error("Unclosed comment"),-1):-1;default:if("CDATA["==e.substr(t+3,6)){var i=e.indexOf("]]>",t+9);return r.startCDATA(),r.characters(e,t+9,i-t-9),r.endCDATA(),i+3}var a=function(e,t){var r,n=[],i=/'[^']+'|"[^"]+"|[^\s<>\/=]+=?|(\/?\s*>|<)/g;i.lastIndex=t,i.exec(e);for(;r=i.exec(e);)if(n.push(r),r[1])return n}(e,t),o=a.length;if(o>1&&/!doctype/i.test(a[0][0])){var s=a[1][0],u=o>3&&/^public$/i.test(a[2][0])&&a[3][0],l=o>4&&a[4][0],c=a[o-1];return r.startDTD(s,u&&u.replace(/^(['"])(.*?)\1$/,"$2"),l&&l.replace(/^(['"])(.*?)\1$/,"$2")),r.endDTD(),c.index+c[0].length}}return-1}function b(e,t,r){var n=e.indexOf("?>",t);if(n){var i=e.substring(t,n).match(/^<\?(\S*)\s*([\s\S]*?)\s*$/);if(i){i[0].length;return r.processingInstruction(i[1],i[2]),n+2}return-1}return-1}function x(e){}function k(e,t){return e.__proto__=t,e}d.prototype={parse:function(e,t,r){var n=this.domBuilder;n.startDocument(),w(t,t={}),function(e,t,r,n,i){function a(e){var t=e.slice(1,-1);return t in r?r[t]:"#"===t.charAt(0)?function(e){if(e>65535){var t=55296+((e-=65536)>>10),r=56320+(1023&e);return String.fromCharCode(t,r)}return String.fromCharCode(e)}(parseInt(t.substr(1).replace("x","0x"))):(i.error("entity not found:"+e),e)}function o(t){if(t>w){var r=e.substring(w,t).replace(/&#?\w+;/g,a);h&&s(w),n.characters(r,0,t-w),w=t}}function s(t,r){for(;t>=l&&(r=c.exec(e));)u=r.index,l=u+r[0].length,h.lineNumber++;h.columnNumber=t-u+1}var u=0,l=0,c=/.*(?:\r\n?|\n)|.*$/g,h=n.locator,f=[{currentNSMap:t}],d={},w=0;for(;;){try{var k=e.indexOf("<",w);if(k<0){if(!e.substr(w).match(/^\s*$/)){var E=n.doc,T=E.createTextNode(e.substr(w));E.appendChild(T),n.currentElement=T}return}switch(k>w&&o(k),e.charAt(k+1)){case"/":var C=e.indexOf(">",k+3),N=e.substring(k+2,C),S=f.pop();C<0?(N=e.substring(k+2).replace(/[\s<].*/,""),i.error("end tag name: "+N+" is not complete:"+S.tagName),C=k+1+N.length):N.match(/\s</)&&(N=N.replace(/[\s<].*/,""),i.error("end tag name: "+N+" maybe not complete"),C=k+1+N.length);var A=S.localNSMap,I=S.tagName==N,O=I||S.tagName&&S.tagName.toLowerCase()==N.toLowerCase();if(O){if(n.endElement(S.uri,S.localName,N),A)for(var z in A)n.endPrefixMapping(z);I||i.fatalError("end tag name: "+N+" is not match the current start tagName:"+S.tagName)}else f.push(S);C++;break;case"?":h&&s(k),C=b(e,k,n);break;case"!":h&&s(k),C=y(e,k,n,i);break;default:h&&s(k);var D=new x,R=f[f.length-1].currentNSMap,C=m(e,k,D,R,a,i),P=D.length;if(!D.closed&&_(e,C,D.tagName,d)&&(D.closed=!0,r.nbsp||i.warning("unclosed xml attribute")),h&&P){for(var B=p(h,{}),M=0;M<P;M++){var L=D[M];s(L.offset),L.locator=p(h,{})}n.locator=B,g(D,n,R)&&f.push(D),n.locator=h}else g(D,n,R)&&f.push(D);"http://www.w3.org/1999/xhtml"!==D.uri||D.closed?C++:C=v(e,C,D.tagName,a,n)}}catch(e){i.error("element parse error: "+e),C=-1}C>w?w=C:o(Math.max(k,w)+1)}}(e,t,r,n,this.errorHandler),n.endDocument()}},x.prototype={setTagName:function(e){if(!i.test(e))throw new Error("invalid tagName:"+e);this.tagName=e},add:function(e,t,r){if(!i.test(e))throw new Error("invalid attribute:"+e);this[this.length++]={qName:e,value:t,offset:r}},length:0,getLocalName:function(e){return this[e].localName},getLocator:function(e){return this[e].locator},getQName:function(e){return this[e].qName},getURI:function(e){return this[e].uri},getValue:function(e){return this[e].value}},k({},k.prototype)instanceof k||(k=function(e,t){function r(){}for(t in r.prototype=t,r=new r,e)r[t]=e[t];return r}),t.XMLReader=d},function(e,t,r){"use strict";function n(e){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var a=r(0),o=a.wordToUtf8,s=a.convertSpaces,u=a.defaults,l=r(53),c=r(27),h=r(1),f=h.throwMultiError,d=h.throwContentMustBeString,p=r(26),m=r(54),g=r(55),v=r(56),_=r(57);e.exports=function(){function e(t,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.filePath=r.filePath,this.modules=r.modules,this.fileTypeConfig=r.fileTypeConfig,Object.keys(u).map(function(e){this[e]=null!=r[e]?r[e]:u[e]},this),this.setModules({inspect:{filePath:this.filePath}}),this.load(t)}return function(e,t,r){t&&i(e.prototype,t),r&&i(e,r)}(e,[{key:"load",value:function(e){"string"!=typeof e&&d(n(e)),this.content=e}},{key:"setTags",value:function(e){return this.tags=null!=e?e:{},this.scopeManager=l({tags:this.tags,parser:this.parser}),this}},{key:"resolveTags",value:function(e){var t=this;this.tags=null!=e?e:{},this.scopeManager=l({tags:this.tags,parser:this.parser});var r=this.getOptions();return r.scopeManager=l(r),r.resolve=_,_(r).then(function(e){var r=e.resolved;return Promise.all(r.map(function(e){return Promise.resolve(e)})).then(function(e){return t.setModules({inspect:{resolved:e}}),t.resolved=e})})}},{key:"getFullText",value:function(){return function(e,t){var r=c(e,t).matches.map(function(e){return e.array[2]});return o(s(r.join("")))}(this.content,this.fileTypeConfig.tagsXmlTextArray)}},{key:"setModules",value:function(e){this.modules.forEach(function(t){t.set(e)})}},{key:"parse",value:function(){var e=[];this.xmllexed=p.xmlparse(this.content,{text:this.fileTypeConfig.tagsXmlTextArray,other:this.fileTypeConfig.tagsXmlLexedArray}),this.setModules({inspect:{xmllexed:this.xmllexed}});var t=p.parse(this.xmllexed,this.delimiters),r=t.lexed,n=t.errors;e=e.concat(n),this.lexed=r,this.setModules({inspect:{lexed:this.lexed}}),this.parsed=m.parse(this.lexed,this.modules),this.setModules({inspect:{parsed:this.parsed}});var i=m.postparse(this.parsed,this.modules),a=i.postparsed,o=i.errors;return this.postparsed=a,this.setModules({inspect:{postparsed:this.postparsed}}),e=e.concat(o),this.errorChecker(e),this}},{key:"errorChecker",value:function(e){var t=this;e.length&&(this.modules.forEach(function(t){e=t.errorsTransformer(e)}),e.forEach(function(e){e.properties.file=t.filePath}),f(e))}},{key:"baseNullGetter",value:function(e,t){var r=this,n=this.modules.reduce(function(n,i){return null!=n?n:i.nullGetter(e,t,r)},null);return null!=n?n:this.nullGetter(e,t)}},{key:"getOptions",value:function(){return{compiled:this.postparsed,tags:this.tags,modules:this.modules,parser:this.parser,baseNullGetter:this.baseNullGetter.bind(this),filePath:this.filePath,linebreaks:this.linebreaks}}},{key:"render",value:function(e){this.filePath=e;var t=this.getOptions();t.resolved=this.resolved,t.scopeManager=l(t),t.render=g;var r=g(t),n=r.errors,i=r.parts;return this.errorChecker(n),this.content=v(i,t),this.setModules({inspect:{content:this.content}}),this}}]),e}()},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=r(1).getScopeParserExecutionError;function a(e,t){for(var r,n=e.length>>>0,i=0;i<n;i++)if(r=e[i],t.call(this,r,i,e))return r}var o=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.scopePath=t.scopePath,this.scopePathItem=t.scopePathItem,this.scopeList=t.scopeList,this.scopeLindex=t.scopeLindex,this.parser=t.parser,this.resolved=t.resolved}return function(e,t,r){t&&n(e.prototype,t),r&&n(e,r)}(e,[{key:"loopOver",value:function(e,t,r,n){return r=r||!1,this.loopOverValue(this.getValue(e,n),t,r)}},{key:"functorIfInverted",value:function(e,t,r,n){e&&t(r,n)}},{key:"isValueFalsy",value:function(e,t){return null==e||!e||"[object Array]"===t&&0===e.length}},{key:"loopOverValue",value:function(e,t,r){this.resolved&&(r=!1);var n=Object.prototype.toString.call(e),i=this.scopeList[this.num];if(this.isValueFalsy(e,n))return this.functorIfInverted(r,t,i,0);if("[object Array]"!==n)return"[object Object]"===n?this.functorIfInverted(!r,t,e,0):this.functorIfInverted(!r,t,i,0);for(var a,o=0;o<e.length;o++)a=e[o],this.functorIfInverted(!r,t,a,o)}},{key:"getValue",value:function(e,t){var r=this.scopeList.length-1;return function e(t,r,n){var o=this;this.num=n;var s,u=this.scopeList[this.num];if(this.resolved){var l=this.resolved;return this.scopePath.forEach(function(e,t){var r=o.scopeLindex[t];l=(l=a(l,function(e){return e.lIndex===r})).value[o.scopePathItem[t]]}),a(l,function(e){return r.part.lIndex===e.lIndex}).value}var c=this.parser(t,{scopePath:this.scopePath});try{s=c.get(u,this.getContext(r))}catch(e){throw i({tag:t,scope:u,error:e})}return null==s&&this.num>0?e.call(this,t,r,n-1):s}.call(this,e,t,r)}},{key:"getValueAsync",value:function(e,t){var r=this.scopeList.length-1;return function e(t,r,n){var a=this;this.num=n;var o=this.scopeList[this.num],s=this.parser(t,{scopePath:this.scopePath});return Promise.resolve(s.get(o,this.getContext(r))).catch(function(e){throw i({tag:t,scope:o,error:e})}).then(function(i){return null==i&&n>0?e.call(a,t,r,n-1):i})}.call(this,e,t,r)}},{key:"getContext",value:function(e){return{num:this.num,meta:e,scopeList:this.scopeList,resolved:this.resolved,scopePath:this.scopePath,scopePathItem:this.scopePathItem}}},{key:"createSubScopeManager",value:function(t,r,n,i){return new e({resolved:this.resolved,parser:this.parser,scopeList:this.scopeList.concat(t),scopePath:this.scopePath.concat(r),scopePathItem:this.scopePathItem.concat(n),scopeLindex:this.scopeLindex.concat(i.lIndex)})}}]),e}();e.exports=function(e){return e.scopePath=[],e.scopePathItem=[],e.scopeLindex=[],e.scopeList=[e.tags],new o(e)}},function(e,t,r){"use strict";function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var i=r(0),a=i.wordToUtf8,o=i.concatArrays;var s={postparse:function(e,t){function r(e,r){return t.map(function(t){return t.getTraits(e,r)})}var i=[];function a(e,s){return t.reduce(function(e,t){var u=t.postparse(e,function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{},i=Object.keys(r);"function"==typeof Object.getOwnPropertySymbols&&(i=i.concat(Object.getOwnPropertySymbols(r).filter(function(e){return Object.getOwnPropertyDescriptor(r,e).enumerable}))),i.forEach(function(t){n(e,t,r[t])})}return e}({},s,{postparse:a,getTraits:r}));return u.errors?(i=o([i,u.errors]),u.postparsed):u},e)}return{postparsed:a(e),errors:i}},parse:function(e,t){var r,n=!1,i="",o=[];return e.reduce(function(e,s){if("delimiter"===s.type){if(n="start"===s.position,"end"===s.position){var u=s.lIndex;i=a(i),e=function(e,t,r,n,i){for(var a,o=0,s=e.length;o<s;o++)if(a=e[o].parse(t))return a.offset=n,a.endLindex=i,a.lIndex=i,a.raw=t,r.push(a),r;return r.push({type:"placeholder",value:t,offset:n,endLindex:i,lIndex:i}),r}(t,i,e,r,u),r=null,Array.prototype.push.apply(e,o),o=[]}return"start"===s.position&&(o=[],r=s.offset),i="",e}return n?"content"!==s.type||"insidetag"!==s.position?(o.push(s),e):(i+=s.value,e):(e.push(s),e)},[])}};e.exports=s},function(e,t,r){"use strict";var n=r(0).concatArrays,i=r(1).throwUnimplementedTagType;e.exports=function(e){var t=e.baseNullGetter,r=e.compiled,a=e.scopeManager;e.nullGetter=function(e,r){return t(e,r||a)};var o=[],s=r.map(function(t){var r=function(e,t){for(var r,n=0,i=t.modules.length;n<i;n++)if(r=t.modules[n].render(e,t))return r;return!1}(t,e);return r?(r.errors&&(o=n([o,r.errors])),r.value):"content"===t.type||"tag"===t.type?t.value:void i(t)});return{errors:o,parts:s}}},function(e,t,r){"use strict";e.exports=function(e,t){for(var r=0,n=t.modules.length;r<n;r++)e=t.modules[r].postrender(e,t);return e.join("")}},function(e,t,r){"use strict";e.exports=function(e){var t=[],r=e.baseNullGetter,n=e.compiled,i=e.scopeManager;e.nullGetter=function(e,t){return r(e,t||i)},e.resolved=t;var a=[];return Promise.all(n.map(function(r){var n=function(e,t){for(var r,n=0,i=t.modules.length;n<i;n++)if(r=t.modules[n].resolve(e,t))return r;return!1}(r,e);return n?n.then(function(e){t.push({tag:r.value,value:e,lIndex:r.lIndex})}):"placeholder"===r.type?i.getValueAsync(r.value,{part:r}).then(function(n){return null==n&&(n=e.nullGetter(r)),t.push({tag:r.value,value:n,lIndex:r.lIndex}),n}):void 0}).filter(function(e){return e})).then(function(){return{errors:a,resolved:t}})}},function(e,t,r){"use strict";var n=r(59),i=r(60),a=r(61),o=r(62),s=r(64),u={getTemplatedFiles:function(e){return e.file(/ppt\/(slides|slideMasters)\/(slide|slideMaster)\d+\.xml/).map(function(e){return e.name}).concat(["ppt/presentation.xml","docProps/app.xml","docProps/core.xml"])},textPath:function(){return"ppt/slides/slide1.xml"},tagsXmlTextArray:["Company","HyperlinkBase","Manager","cp:category","cp:keywords","dc:creator","dc:description","dc:subject","dc:title","a:t","m:t","vt:lpstr"],tagsXmlLexedArray:["p:sp","a:tc","a:tr","a:table","a:p","a:r","a:rPr"],expandTags:[{contains:"a:tc",expand:"a:tr"}],onParagraphLoop:[{contains:"a:p",expand:"a:p",onlyTextInTag:!0}],tagRawXml:"p:sp",tagTextXml:"a:t",baseModules:[n,o,a,s]},l={getTemplatedFiles:function(e){return e.file(/word\/(header|footer)\d+\.xml/).map(function(e){return e.name}).concat(["docProps/core.xml","docProps/app.xml","word/document.xml","word/document2.xml"])},textPath:function(e){return e.files["word/document.xml"]?"word/document.xml":e.files["word/document2.xml"]?"word/document2.xml":void 0},tagsXmlTextArray:["Company","HyperlinkBase","Manager","cp:category","cp:keywords","dc:creator","dc:description","dc:subject","dc:title","w:t","m:t","vt:lpstr"],tagsXmlLexedArray:["w:tc","w:tr","w:table","w:p","w:r","w:rPr","w:pPr","w:spacing"],expandTags:[{contains:"w:tc",expand:"w:tr"}],onParagraphLoop:[{contains:"w:p",expand:"w:p",onlyTextInTag:!0}],tagRawXml:"w:p",tagTextXml:"w:t",baseModules:[n,i,o,a,s]};e.exports={docx:l,pptx:u}},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,i=!1,a=void 0;try{for(var o,s=e[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){i=!0,a=e}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function i(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var a=r(0),o=a.mergeObjects,s=a.chunkBy,u=a.last,l=a.isParagraphStart,c=a.isParagraphEnd,h=a.isContent,f=r(5),d=r(28),p=d.match,m=d.getValue,g=d.getValues;function v(e){return function(e){return e.some(function(e){return h(e)})}(e)?0:e.length}var _=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name="LoopModule",this.prefix={start:"#",end:"/",dash:/^-([^\s]+)\s(.+)$/,inverted:"^"}}return function(e,t,r){t&&i(e.prototype,t),r&&i(e,r)}(e,[{key:"parse",value:function(e){var t="placeholder",r=this.prefix,i=r.start,a=r.inverted,o=r.dash,s=r.end;if(p(i,e))return{type:t,value:m(i,e),expandTo:"auto",module:"loop",location:"start",inverted:!1};if(p(a,e))return{type:t,value:m(a,e),expandTo:"auto",module:"loop",location:"start",inverted:!0};if(p(s,e))return{type:t,value:m(s,e),module:"loop",location:"end"};if(p(o,e)){var u=n(g(o,e),3),l=u[1];return{type:t,value:u[2],expandTo:l,module:"loop",location:"start",inverted:!1}}return null}},{key:"getTraits",value:function(e,t){if("expandPair"===e)return t.reduce(function(e,t,r){return"placeholder"===t.type&&"loop"===t.module&&e.push({part:t,offset:r}),e},[])}},{key:"postparse",value:function(e,t){var r=t.basePart;if(!function(e){return 0!==e.length&&l(e[0])&&c(u(e))}(e))return e;if(!r||"auto"!==r.expandTo||"loop"!==r.module)return e;var n=s(e,function(e){return l(e)?"start":c(e)?"end":null});if(n.length<=2)return e;var i=n[0],a=u(n),o=v(i),h=v(a);return 0===o||0===h?e:e.slice(o,e.length-h)}},{key:"render",value:function(e,t){if("placeholder"===!e.type||"loop"!==e.module)return null;var r=[],n=[];return t.scopeManager.loopOver(e.value,function(i,a){var s=t.scopeManager.createSubScopeManager(i,e.value,a,e),u=t.render(o({},t,{compiled:e.subparsed,tags:{},scopeManager:s}));r=r.concat(u.parts),n=n.concat(u.errors||[])},e.inverted,{part:e}),{value:r.join(""),errors:n}}},{key:"resolve",value:function(e,t){if("placeholder"===!e.type||"loop"!==e.module)return null;var r=t.scopeManager.getValue(e.value,{part:e}),n=[];function i(r,i){var a=t.scopeManager.createSubScopeManager(r,e.value,i,e);n.push(t.resolve(o(t,{compiled:e.subparsed,tags:{},scopeManager:a})))}return Promise.resolve(r).then(function(r){return t.scopeManager.loopOverValue(r,i,e.inverted),Promise.all(n).then(function(e){return e.map(function(e){return e.resolved})})}).then(function(e){return e})}}]),e}();e.exports=function(){return f(new _)}},function(e,t,r){"use strict";var n=r(5),i=r(0),a=i.isTextStart,o=i.isTextEnd,s=i.endsWith,u=i.startsWith,l='<w:t xml:space="preserve">'.length,c="</w:t>".length;function h(e,t){var r=e[t].value;return"</w:t>"===e[t+1].value?r:-1!==r.indexOf('xml:space="preserve"')?r:r.substr(0,r.length-1)+' xml:space="preserve">'}var f={name:"SpacePreserveModule",postparse:function(e,t){var r=[],n=!1,i=0,s=0;var u=e.reduce(function(e,u){return function(e){return a(e)&&"w:t"===e.tag}(u)&&(n=!0,s=r.length),n?(r.push(u),function(e,t){return e&&e.basePart&&t.length>1}(t,r)&&(i=t.basePart.endLindex,r[0].value=h(r,0)),function(e,t){return!i&&"placeholder"===e.type&&(!e.module||"loop"===e.module)&&t.length>1}(u,r)&&(i=u.endLindex,r[0].value=h(r,0)),o(u)&&u.lIndex>i&&(0!==i&&(r[s].value=h(r,s)),Array.prototype.push.apply(e,r),r=[],n=!1,i=0,s=0),e):(e.push(u),e)},[]);return Array.prototype.push.apply(u,r),u},postrender:function(e){return e.filter(function(e){return 0!==e.length}).reduce(function(e,t,r,n){return-1!==t.indexOf('<w:t xml:space="preserve"></w:t>')&&(t=t.replace(/<w:t xml:space="preserve"><\/w:t>/g,"<w:t/>")),s(t,'<w:t xml:space="preserve">')&&u(n[r+1],"</w:t>")&&(t=t.substr(0,t.length-l)+"<w:t/>",n[r+1]=n[r+1].substr(c)),e.push(t),e},[])}};e.exports=function(){return n(f)}},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=r(11),a=r(0).isContent,o=r(1).throwRawTagShouldBeOnlyTextInParagraph,s=r(28),u=s.match,l=s.getValue,c=r(5);function h(e){var t=e.part,r=e.left,n=e.right,i=e.postparsed,s=e.index,u=function(e,t,r){for(var n=r;n>=0;n--)for(var i=e[n],a=0,o=t.length;a<o;a++){var s=t[a];if(0===i.value.indexOf("<"+s)&&-1!==[">"," "].indexOf(i.value[s.length+1]))return t[a]}return null}(i,["w:p","w:tc"],r-1);"w:tc"===function(e,t,r){for(var n=r,i=e.length;n<i;n++)for(var a=e[n],o=0,s=t.length;o<s;o++){var u=t[o];if(a.value==="</"+u+">")return t[o]}return-1}(i,["w:p","w:tc"],n+1)&&"w:tc"===u&&(t.emptyValue="<w:p></w:p>");var l=i.slice(r+1,n);return l.forEach(function(e,n){n!==s-r-1&&a(e)&&o({paragraphParts:l,part:t})}),t}var f=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name="RawXmlModule",this.prefix="@"}return function(e,t,r){t&&n(e.prototype,t),r&&n(e,r)}(e,[{key:"optionsTransformer",value:function(e,t){return this.fileTypeConfig=t.fileTypeConfig,e}},{key:"parse",value:function(e){return u(this.prefix,e)?{type:"placeholder",value:l(this.prefix,e),module:"rawxml"}:null}},{key:"postparse",value:function(e){return i.expandToOne(e,{moduleName:"rawxml",getInner:h,expandTo:this.fileTypeConfig.tagRawXml})}},{key:"render",value:function(e,t){if("rawxml"!==e.module)return null;var r=t.scopeManager.getValue(e.value,{part:e});return null==r&&(r=t.nullGetter(e)),r?{value:r}:{value:e.emptyValue||""}}},{key:"resolve",value:function(e,t){return"placeholder"===!e.type||"rawxml"!==e.module?null:t.scopeManager.getValueAsync(e.value,{part:e}).then(function(r){return null==r?t.nullGetter(e):r})}}]),e}();e.exports=function(){return c(new f)}},function(e,t,r){"use strict";function n(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var r=[],n=!0,i=!1,a=void 0;try{for(var o,s=e[Symbol.iterator]();!(n=(o=s.next()).done)&&(r.push(o.value),!t||r.length!==t);n=!0);}catch(e){i=!0,a=e}finally{try{n||null==s.return||s.return()}finally{if(i)throw a}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var i=r(63),a=r(0),o=a.getLeft,s=a.getRight,u=r(5),l=r(11).getExpandToDefault,c=r(1),h=c.getUnmatchedLoopException,f=c.getClosingTagNotMatchOpeningTag,d=c.throwLocationInvalid;function p(e){switch(e.location){case"start":return 1;case"end":return-1;default:d(e)}}var m={name:"ExpandPairTrait",optionsTransformer:function(e,t){return this.expandTags=t.fileTypeConfig.expandTags.concat(t.options.paragraphLoop?t.fileTypeConfig.onParagraphLoop:[]),e},postparse:function(e,t){var r=this,a=t.getTraits,u=t.postparse,c=a("expandPair",e);c=c.map(function(e){return e||[]});var d,m=function e(t){var r=[],i=[];if(0===t.length)return{pairs:i,errors:r};var a=1,o=n(t,1)[0];if("start"===o.part.location)for(var s=1;s<t.length;s++){var u=t[s];if(0===(a+=p(u.part))){var l=e(t.slice(s+1));return u.part.value!==o.part.value&&""!==u.part.value?r.push(f({tags:[o.part,u.part]})):i=[[o,u]],{pairs:i.concat(l.pairs),errors:r.concat(l.errors)}}}var c=o.part;r.push(h({part:c,location:c.location}));var d=e(t.slice(1));return{pairs:d.pairs,errors:r.concat(d.errors)}}(c=i(c)),g=m.pairs,v=m.errors,_=g.map(function(t){var n=t[0].part.expandTo;if("auto"===n){var i=l(e,t,r.expandTags);i.error&&v.push(i.error),n=i.value}return n?[o(e,n,t[0].offset),s(e,n,t[1].offset)]:[t[0].offset,t[1].offset]}),w=0;return{postparsed:e.reduce(function(t,r,n){var i=w<g.length&&_[w][0]<=n,a=g[w],o=_[w];if(!i)return t.push(r),t;if(o[0]===n&&(d=[]),a[0].offset!==n&&a[1].offset!==n&&d.push(r),o[1]===n){var s=e[a[0].offset];s.subparsed=u(d,{basePart:s}),delete s.location,delete s.expandTo,t.push(s),w++}return t},[]),errors:v}}};e.exports=function(){return u(m)}},function(e,t,r){"use strict";function n(e,t){for(var r=-1,n=0,i=e.length;n<i;n++)t[n]>=e[n].length||(-1===r||e[n][t[n]].offset<e[r][t[r]].offset)&&(r=n);if(-1===r)throw new Error("minIndex negative");return r}e.exports=function(e){var t=e.reduce(function(e,t){return e+t.length},0);e=e.filter(function(e){return e.length>0});for(var r=new Array(t),i=e.map(function(){return 0}),a=0;a<=t-1;){var o=n(e,i);r[a]=e[o][i[o]],i[o]++,a++}return r}},function(e,t,r){"use strict";function n(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}var i=r(5),a=r(1).getScopeCompilationError,o=r(0),s=o.utf8ToWord,u=o.hasCorruptCharacters,l=r(1).throwCorruptCharacters,c={docx:"w",pptx:"a"},h=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.name="Render",this.recordRun=!1,this.recordedRun=[]}return function(e,t,r){t&&n(e.prototype,t),r&&n(e,r)}(e,[{key:"set",value:function(e){e.compiled&&(this.compiled=e.compiled),null!=e.data&&(this.data=e.data)}},{key:"getRenderedMap",value:function(e){var t=this;return Object.keys(this.compiled).reduce(function(e,r){return e[r]={from:r,data:t.data},e},e)}},{key:"optionsTransformer",value:function(e,t){return this.parser=t.parser,this.fileType=t.fileType,e}},{key:"postparse",value:function(e){var t=this,r=[];return e.forEach(function(e){if("placeholder"===e.type){var n=e.value;try{t.parser(n,{tag:e})}catch(e){r.push(a({tag:n,rootError:e}))}}}),{postparsed:e,errors:r}}},{key:"recordRuns",value:function(e){e.tag==="".concat(c[this.fileType],":r")?(this.recordRun=!1,this.recordedRun=[]):e.tag==="".concat(c[this.fileType],":rPr")?("start"===e.position&&(this.recordRun=!0,this.recordedRun=[e.value]),"end"===e.position&&(this.recordedRun.push(e.value),this.recordRun=!1)):this.recordRun&&this.recordedRun.push(e.value)}},{key:"render",value:function(e,t){var r=t.scopeManager,n=t.linebreaks,i=t.nullGetter;if(n&&this.recordRuns(e),"placeholder"===e.type&&!e.module){var a=r.getValue(e.value,{part:e});if(null==a&&(a=i(e)),u(a)&&l({tag:e.value,value:a}),"string"!=typeof a&&(a=a.toString()),n){var o=c[this.fileType],h="docx"===this.fileType?"<w:r><w:br/></w:r>":"<a:br/>",f=a.split("\n"),d=this.recordedRun.join("");return{value:f.map(function(e){return s(e)}).join("</".concat(o,":t></").concat(o,":r>").concat(h,"<").concat(o,":r>").concat(d,"<").concat(o,":t>"))}}return{value:s(a)}}}}]),e}();e.exports=function(){return i(new h)}},function(e,t){e.exports=require("fs")},function(e,t){e.exports=require("path")}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,